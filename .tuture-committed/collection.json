{
  "name": "一杯茶的时间,上手 TypeScript",
  "description": "",
  "id": "cea18bc864f7a9b94223dcc718646b02",
  "created": "2020-03-04T03:02:15.850Z",
  "articles": [
    {
      "name": "类型即正义：TypeScript 从入门到实践（序言）",
      "description": "JavaScript 已经占领了世界上的每一个角落，能访问网页的地方，基本上就有 JavaScript 在运作，然而 JavaScript 因为其动态、弱类型、解释型语言的特性、出错的调用栈隐蔽，使得开发者不仅在调试错误上花费大把时间，在团队协作开发时理解队友编写代码也极其困难。TypeScript 的出现极大的解决了上面的问题，TypeScript -- 一个 JavaScript 的超集，它作为一门编译型语言，提供了对类型系统和最新 ES 语法的支持，使得我们可以在享受使用 ES 最新语法的编写代码的同时，还能在写代码的过程中就规避很多潜在的语法、语义错误；并且其提供的类型系统使得我们可以在团队协作编写代码时可以很容易的了解队友代码的含义：输入和输出，大大提高了团队协作编写大型业务应用的效率。在现代 JavaScript 世界中，已经有很多大型库在使用 TypeScript 重构，包括前端三大框架：React、Vue、Angular，还有知名的组件库 antd，material，在很多公司内部的大型业务应用也在用 TypeScript 开发甚至重写现有的应用，所以如果你想编写大型业务应用或库，或者想写出更利于团队协作的代码，那么 TypeScript 有十足的理由值得你学习！本文是 TypeScript 系列教程的第一篇，主要通过使用 antd 组件库实战演练一个 TypeScript 版本 React TodoList 应用来讲解 TypeScript 的语法，使得你能在学会语法的同时还能完成一个实际可运行的项目。",
      "id": "cea18bc864f7a9b94223dcc718646b02",
      "topics": [
        "TypeScript",
        "React"
      ],
      "cover": "https://imgkr.cn-bj.ufileos.com/42a9feee-4d55-41cc-a770-e210a777f38c.png",
      "created": "2020-04-06T01:47:37.842Z",
      "categories": [
        "前端",
        "进阶",
        "TypeScript"
      ]
    },
    {
      "id": "C_ao1Yvqy",
      "created": "2020-04-06T01:48:37.842Z",
      "name": "类型即正义：TypeScript 从入门到实践（一）",
      "topics": [
        "TypeScript",
        "React"
      ],
      "cover": "https://imgkr.cn-bj.ufileos.com/04cd8d13-aa08-47f8-bb45-c933c03260f1.png",
      "description": "这一节我们来重点讲解一下 TS 基础类型，这是使用 TypeScript 进行编程的基础，在详细讲解并实践了 TypeScript 类型之后，我们还会了解 TypeScript 特殊的内容：枚举和接口，它们允许你给复杂的 JS 数据结构进行类型注解。",
      "categories": [
        "前端",
        "进阶",
        "TypeScript"
      ]
    },
    {
      "id": "H2r1tpF_v",
      "created": "2020-04-06T10:20:24.050Z",
      "name": "类型即正义：TypeScript 从入门到实践（二）",
      "topics": [
        "TypeScript",
        "React"
      ],
      "cover": "https://imgkr.cn-bj.ufileos.com/233006bf-c5ae-4721-97ea-4817cd1fc8c7.png",
      "description": "了解了基础的 TS 类型，接口之后，我们开始了解如何给更加复杂的结构注解类型，这就是我们这节里面要引出的函数，进而我们讲解如何对类型进行运算：交叉类型和联合类型，最后我们讲解了最原子类型：字面量类型，以及如何与联合类型搭配实现类型守卫效果。",
      "categories": [
        "前端",
        "进阶",
        "TypeScript"
      ]
    },
    {
      "id": "H2ybXYu3c",
      "created": "2020-04-10T13:04:44.150Z",
      "name": "类型即正义：TypeScript 从入门到实践（三）",
      "topics": [
        "TypeScript",
        "React"
      ],
      "description": "学习了注解函数，又了解了类型运算如联合类型和交叉类型，接下来我们来了解一些 TS 中独有的类型别名，它类似 JS 变量，是类型变量，接着我们还会学习 TS 中内容非常庞杂的内容之一：类，了解 TS 中类的独有特性，以及如何注解类，甚至用类去注解其他内容。",
      "cover": "https://imgkr.cn-bj.ufileos.com/850cbbd7-9826-4d7d-a69e-3c1b498fee80.png",
      "categories": [
        "前端",
        "进阶",
        "TypeScript"
      ]
    },
    {
      "id": "05f37363",
      "created": "2020-05-17T00:32:23.234Z",
      "name": "类型即正义：TypeScript 从入门到实践（四）：你不知道的泛型",
      "topics": [
        "React",
        "TypeScript"
      ],
      "categories": [
        "前端",
        "进阶",
        "TypeScript"
      ],
      "cover": "",
      "description": "在之前的文章中，我们了解了 TypeScript 主要分为 JS 语言侧和类型侧两个部分。\n\n在介绍了类型侧的一些基础知识，我们用这些学到的基础知识去注解对应的 JS 内容，将 JS 内容如变量、函数、类等类型化，这样确保写出的代码非常利于团队协作，且能快速排错。\n\n在了解了之前几篇文章里面的知识之后，你应该可以使用 TypeScript 进行正常的项目开发了。"
    }
  ],
  "category": [
    "前端",
    "TypeScript",
    "进阶"
  ],
  "steps": [
    {
      "type": "step",
      "id": "FrAynCUC",
      "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
      "children": [
        {
          "type": "heading-two",
          "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
          "id": "qGC33dA5B",
          "fixed": true,
          "children": [
            {
              "text": "Initialize project using Create React App"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": ".gitignore",
          "display": false,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": ".gitignore",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "README.md",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "README.md",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "package.json",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "package.json",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "public/favicon.ico",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/favicon.ico",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "public/index.html",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/index.html",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "public/logo192.png",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/logo192.png",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "public/logo512.png",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/logo512.png",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "public/manifest.json",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/manifest.json",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "public/robots.txt",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/robots.txt",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/App.css",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.css",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/App.test.tsx",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.test.tsx",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/App.tsx",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.tsx",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/index.css",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/index.css",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/index.tsx",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/index.tsx",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/logo.svg",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/logo.svg",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/react-app-env.d.ts",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/react-app-env.d.ts",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/serviceWorker.ts",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/serviceWorker.ts",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/setupTests.ts",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/setupTests.ts",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "tsconfig.json",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "tsconfig.json",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "yarn.lock",
          "display": false,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "yarn.lock",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "756b2d45f9790caf91ab4c76c23dec06b7bf9da8",
      "id": "a4w1VbT4C",
      "articleId": "cea18bc864f7a9b94223dcc718646b02",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "756b2d45f9790caf91ab4c76c23dec06b7bf9da8",
          "id": "YTarZZsHP",
          "fixed": true,
          "children": [
            {
              "text": "准备代码"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "numbered-list",
              "children": [
                {
                  "text": "因为需要尽可能全且精炼的讲解 TypeScript 语法知识，所以我们需要一个恰到好处的实战项目，这一小节主要是用于讲解我们准备初始 TypeScript 版本的 React 项目代码的过程，在下一个小节中我们将会结合 React 项目代码，真正开始 TypeScript 语法的讲解。",
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 1
                },
                {
                  "text": "",
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 2
                }
              ]
            },
            {
              "type": "block-quote",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "本文所涉及的源代码都放在了 ",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 2
                    },
                    {
                      "text": "Github",
                      "link": true,
                      "url": "https://github.com/tuture-dev/typescript-tea",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 3
                    },
                    {
                      "text": "  或者 ",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 4
                    },
                    {
                      "text": "Gitee",
                      "link": true,
                      "url": "https://gitee.com/tuture/typescript-tea",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 5
                    },
                    {
                      "text": " 上，如果您觉得我们写得还不错，希望您能给",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 6
                    },
                    {
                      "text": "❤️这篇文章点赞+",
                      "bold": true,
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 7
                    },
                    {
                      "text": "Github",
                      "bold": true,
                      "link": true,
                      "url": "https://github.com/tuture-dev/typescript-tea",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 8
                    },
                    {
                      "text": " 或 ",
                      "bold": true,
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 9
                    },
                    {
                      "text": "Gitee",
                      "bold": true,
                      "link": true,
                      "url": "https://gitee.com/tuture/typescript-tea",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 10
                    },
                    {
                      "text": " 仓库加星❤",
                      "bold": true,
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 11
                    },
                    {
                      "text": "️哦~",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 12
                    }
                  ]
                }
              ]
            },
            {
              "type": "block-quote",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "此教程属于 "
                    },
                    {
                      "text": "React 前端工程师学习路线",
                      "link": true,
                      "url": "https://github.com/tuture-dev/react-roadmap"
                    },
                    {
                      "text": "的一部分，欢迎来 Star 一波，鼓励我们继续创作出更好的教程，持续更新中~"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "前提条件"
                }
              ],
              "id": "1NdyR4i1"
            },
            {
              "type": "numbered-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "确保你已经安装了 Node.js，可以访问官网安装："
                    },
                    {
                      "text": "官网地址",
                      "link": true,
                      "url": "https://nodejs.org/en/"
                    },
                    {
                      "text": "。"
                    }
                  ],
                  "id": "P5O7r0Vw",
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 1
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "确保你已经了解基本的 React 开发知识，图雀社区有一篇很好的 "
                    },
                    {
                      "text": "React 入门教程",
                      "link": true,
                      "url": "https://tuture.co/2019/11/18/07acf61/"
                    },
                    {
                      "text": "，你可以通过学习它很快的上手 React。"
                    }
                  ],
                  "id": "P5O7r0Vw",
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 2
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "确保你有一定的命令行使用基础，包括使用 Npm （Node.js 包管理工具）来安装包。"
                    }
                  ],
                  "id": "P5O7r0Vw",
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 3
                }
              ]
            }
          ]
        },
        {
          "file": "package.json",
          "display": true,
          "commit": "756b2d45f9790caf91ab4c76c23dec06b7bf9da8",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "初始化应用"
                    }
                  ],
                  "id": "Ve3OOJYV"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "初始一个 React 应用的最佳方式那么一定是 React 官方维护的 "
                    },
                    {
                      "text": "Create React App",
                      "link": true,
                      "url": "https://github.com/facebook/create-react-app"
                    },
                    {
                      "text": " 脚手架了，我们打开终端，运行如下命令来初始化一个 TypeScript 版本的 React 应用："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "$ npx create-react-app typescript-tea --template typescript"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "运行如上命令，命令行里面应该会有一系列输出，等待几分钟，就会提示已经初始化完成，并提供了对于的命令来帮助你开启项目，我们根据提示输入如下命令来开启项目："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "$ cd typescript-tea"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "$ npm start"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "运行如上命令之后，会自动开启 Webpack 开发服务器，并打开浏览器窗户，访问 "
                    },
                    {
                      "text": "http://localhost:3000/",
                      "link": true,
                      "url": "http://localhost:3000/"
                    },
                    {
                      "text": " 来展示你的应用初始界面："
                    }
                  ]
                },
                {
                  "type": "image",
                  "url": "https://imgkr.cn-bj.ufileos.com/fd00d350-511b-4eab-919b-2cd0882c96d9.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "children": [
                    {
                      "text": "如果看到这个界面，恭喜你🥳！成功创建一个 TypeScript 版本的 React 应用！"
                    }
                  ]
                },
                {
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "在下文中，为了简化语言，我们统一称 TypeScript 为 TS。"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "引入 antd 组件库"
                    }
                  ],
                  "id": "fvc0l_Mx"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "实战驱动的技术学习能带给我们成就感，便捷好用的包可以加快我们的开发效率，好看的界面可以提高我们的审美能力，缓解学习疲劳。在这篇教程的讲解过程中，我们将通过 "
                    },
                    {
                      "text": "Ant Design",
                      "link": true,
                      "url": "https://ant.design/index-cn"
                    },
                    {
                      "text": " 对应的 React 组件库 "
                    },
                    {
                      "text": "antd",
                      "link": true,
                      "url": "https://github.com/ant-design/ant-design"
                    },
                    {
                      "text": " 来辅助我们项目的编写，使得我们可以专注于讲解 TS 的核心知识，而不被繁杂的界面语言所干扰，还能做出对应相应完成的目标功能。"
                    }
                  ],
                  "id": "b0UpFoZ4"
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "Ant Design ",
                          "link": true,
                          "url": "https://ant.design/index-cn"
                        },
                        {
                          "text": "是蚂蚁金服孵化的一套企业级产品设计体系，提供了完备的 TS 类型定义，使得我们可以很方便的在 TS 项目中使用，在最近发布了 4.0 版本，致力于创造高效愉悦的工作体验。"
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "除此之外 Ant Design 的周边生态也很丰富："
                        }
                      ]
                    },
                    {
                      "type": "bulleted-list",
                      "children": [
                        {
                          "type": "list-item",
                          "children": [
                            {
                              "text": "包括新一代数据可视化解决方案："
                            },
                            {
                              "text": "AntV",
                              "link": true,
                              "url": "https://antv.vision/zh"
                            }
                          ],
                          "level": 0,
                          "parent": "bulleted-list"
                        },
                        {
                          "type": "list-item",
                          "children": [
                            {
                              "text": "一个基于 Preact / React / React Native 的 UI 组件库："
                            },
                            {
                              "text": "Ant Design Mobile",
                              "link": true,
                              "url": "https://mobile.ant.design/index-cn"
                            }
                          ],
                          "level": 0,
                          "parent": "bulleted-list"
                        },
                        {
                          "type": "list-item",
                          "children": [
                            {
                              "text": "开箱即用的中台前端/设计解决方案："
                            },
                            {
                              "text": "Ant Design Pro",
                              "link": true,
                              "url": "https://pro.ant.design/index-cn"
                            }
                          ],
                          "level": 0,
                          "parent": "bulleted-list"
                        },
                        {
                          "type": "list-item",
                          "children": [
                            {
                              "text": "插画设计："
                            },
                            {
                              "text": "海兔",
                              "link": true,
                              "url": "https://ant.design/docs/spec/illustration-cn"
                            }
                          ],
                          "level": 0,
                          "parent": "bulleted-list"
                        },
                        {
                          "type": "list-item",
                          "children": [
                            {
                              "text": "一款为设计者提升工作效率的 Sketch 工具集 ： "
                            },
                            {
                              "text": "Kitchen",
                              "link": true,
                              "url": "https://kitchen.alipay.com/"
                            }
                          ],
                          "level": 0,
                          "parent": "bulleted-list"
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "后面图雀社区计划围绕 Ant Design 生态撰写一系列教程，帮助大家提高设计、开发效率，敬请期待！✌️",
                          "url": "https://kitchen.alipay.com/"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "安装依赖",
                      "url": "https://kitchen.alipay.com/"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list",
                  "id": "g9xC_KbC"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "好了，大致介绍了 antd 组件库及 Ant Design 周边之后，我们马上来写代码引入 antd，打开命令行，在其中输入如下命令：",
                      "url": "https://kitchen.alipay.com/"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "$ npm install antd"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "运行上面的命令安装完依赖之后就可以在项目中使用了，但是为了更好的定制样式和按需引用以减小打包之后的包体积，我们还需要做一点定制化的操作，打开命令行，依次安装如下依赖："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "$ npm install react-app-rewired customize-cra babel-plugin-import less less-loader "
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "注意到上面我们安装了很多包，我们来依次解释一下上面各种包的意思："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "react-app-rewired：用来定制化 Create React App （CRA)脚手架的一些配置，比如 Webpack、Babel 等，因为 CRA 它是一个封闭的黑盒，不允许开发者直接定制，但有时候我们需要对配置做一些修改，比如这里需要配置 antd 的按需引用。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "customize-cra：是 CRA 在发布 2.0 之后出来的一个辅助 react-app-rewired 更方便定制 CRA 的 Webpack 配置的一个库，它提供了一些开箱即用的 API。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "babel-plugin-import：是配置可供开发者按需引用 antd 组件的一个 Babel 插件"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "less 和 less-loader：是我们用于定制化 antd 的主题需要的 Webpack loader，因为 antd 使用 less 作为样式化语言。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后我们安装一个在 Ant Design 4.0 拆分出去的 icons 包，可以用来按需引用 icons，进一步减少最后的打包体积，继续在命令行运行如下命令："
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "$ npm install @ant-design/icons"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "大功告成！现在我们所有的依赖以及安装完成。接下来就需要改写一下 CRA 之前通过 "
                    },
                    {
                      "text": "react-scripts",
                      "code": true
                    },
                    {
                      "text": "  跑开发构建的流程，用我们安装的 "
                    },
                    {
                      "text": "react-app-rewired",
                      "code": true
                    },
                    {
                      "text": "  脚本来替换它，当安装完了所有依赖，以及用"
                    },
                    {
                      "text": "react-app-rewired",
                      "code": true
                    },
                    {
                      "text": "   替换 "
                    },
                    {
                      "text": "react-scripts",
                      "code": true
                    },
                    {
                      "text": "  之后，我们的 "
                    },
                    {
                      "text": "package.json",
                      "code": true
                    },
                    {
                      "text": "  文件应该是下面的样子："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "package.json",
              "commit": "756b2d45f9790caf91ab4c76c23dec06b7bf9da8",
              "hiddenLines": [
                [
                  0,
                  1
                ],
                [
                  33,
                  48
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "config-overrides.js",
          "display": true,
          "commit": "756b2d45f9790caf91ab4c76c23dec06b7bf9da8",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "修改配置"
                    }
                  ],
                  "id": "V63VF7AY"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "安装完依赖之后，我们要确保对应改写 CRA 流程的配置生效，我们需要根据 "
                    },
                    {
                      "text": "react-app-rewired",
                      "code": true
                    },
                    {
                      "text": " 的文档说明在根目录下建立 "
                    },
                    {
                      "text": "config-overrides.js",
                      "code": true
                    },
                    {
                      "text": " 文件，并在其中编写如下的内容："
                    }
                  ],
                  "id": "7Gsv9BxO"
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "config-overrides.js",
              "commit": "756b2d45f9790caf91ab4c76c23dec06b7bf9da8",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面的代码主要是导出一个用于修改 Webpack 配置的对象，使用 "
                    },
                    {
                      "text": "override",
                      "code": true
                    },
                    {
                      "text": " API，接收两个修改配置的函数调用，"
                    },
                    {
                      "text": "fixBabelImports",
                      "code": true
                    },
                    {
                      "text": " 用于配置 antd 的按需引用，"
                    },
                    {
                      "text": "addLessLoader",
                      "code": true
                    },
                    {
                      "text": " 用于配置 antd 的主题，这里我们使用了 Ant Design 4.0 新带来的 Dark Mode（暗色模式），然后配置了主题色为图雀社区的主题色："
                    },
                    {
                      "text": "#02b875",
                      "code": true
                    },
                    {
                      "text": " ，代表希望的绿色。😆"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "自此，我们就引入了 antd 组件库，并进行了按需配置使用以及配置主题色和使用了 Ant Design 最新的暗色主题 -- Dark Mode。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.tsx",
          "display": true,
          "commit": "756b2d45f9790caf91ab4c76c23dec06b7bf9da8",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "编写初始代码"
                    }
                  ],
                  "id": "0JCteUmB"
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "准备逻辑部分"
                    }
                  ],
                  "id": "7A55zZgw"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接下来，我们将使用 antd 帮助我们快速的编写一下我们即将实现的待办事项的界面，打开 "
                    },
                    {
                      "text": "src/App.tsx",
                      "code": true
                    },
                    {
                      "text": " ，对其中的代码做出对应的修改如下："
                    }
                  ],
                  "id": "3tYKzGsO"
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.tsx",
              "commit": "756b2d45f9790caf91ab4c76c23dec06b7bf9da8",
              "hiddenLines": [
                [
                  191,
                  192
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.css",
          "display": true,
          "commit": "756b2d45f9790caf91ab4c76c23dec06b7bf9da8",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "上面的代码主要就是一系列初始数据的准备，antd 组件的使用，编写起来的大致轮廓，还没有涉及到任何的 TS 语法，但这个是我们开始项目的基础，读者只需要进行简单的复制放进现有的 "
                    },
                    {
                      "text": "typescript-tea",
                      "code": true
                    },
                    {
                      "text": " 项目中对应的 "
                    },
                    {
                      "text": "src/App.tsx",
                      "code": true
                    },
                    {
                      "text": "  中即可。"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "准备样式部分"
                    }
                  ],
                  "id": "Tc39YkDF"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "准备了逻辑代码之后，为了让我们最后的待办事项在样式上更美观一点，也利于我们讲解时的操作，我们需要给项目加一点样式，打开 "
                    },
                    {
                      "text": "src/App.css",
                      "code": true
                    },
                    {
                      "text": " 对其中的代码做出对应的修改如下："
                    }
                  ],
                  "id": "ruXvaDpP"
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.css",
              "commit": "756b2d45f9790caf91ab4c76c23dec06b7bf9da8",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "好了！所有的准备工作已经就绪，在开始下一节真正的 TS 学习之前，我们先来回顾一下我们在这个小节中所完成的工作："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "使用 CRA 的 TypeScript 脚本初始化了一个 TS 版的 React 项目"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "安装了 antd 组件库，并使用 "
                        },
                        {
                          "text": "react-app-rewired",
                          "code": true
                        },
                        {
                          "text": " 替换默认的 "
                        },
                        {
                          "text": "react-scripts",
                          "code": true
                        },
                        {
                          "text": " 来完成对 CRA 的 Webpack 配置进行修改，以是我们可以获得 antd 组件的按需引用和主题定制的功能"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "准备了初始待办事项代码的逻辑部分和样式部分"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们在前面铺垫了大量的 TypeScript 的优点以及花了不少笔墨来准备初始代码，想必读到这里的读者们可能已经等不及要马上见识一下 TS 的庐山真面目了吧！马上就来啦！"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "有的读者肯定"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/logo.svg",
          "display": false,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/logo.svg",
              "commit": "756b2d45f9790caf91ab4c76c23dec06b7bf9da8",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "yarn.lock",
          "display": false,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "yarn.lock",
              "commit": "756b2d45f9790caf91ab4c76c23dec06b7bf9da8",
              "hiddenLines": [
                [
                  0,
                  0
                ],
                [
                  40,
                  212
                ],
                [
                  221,
                  959
                ],
                [
                  968,
                  1771
                ],
                [
                  1785,
                  1889
                ],
                [
                  1947,
                  2020
                ],
                [
                  2032,
                  2055
                ],
                [
                  2064,
                  2122
                ],
                [
                  2134,
                  2230
                ],
                [
                  2245,
                  2314
                ],
                [
                  2323,
                  2840
                ],
                [
                  2852,
                  2907
                ],
                [
                  2919,
                  3006
                ],
                [
                  3030,
                  3050
                ],
                [
                  3062,
                  3146
                ],
                [
                  3160,
                  3265
                ],
                [
                  3280,
                  3491
                ],
                [
                  3505,
                  3532
                ],
                [
                  3544,
                  3740
                ],
                [
                  3752,
                  3927
                ],
                [
                  3936,
                  4887
                ],
                [
                  4899,
                  5010
                ],
                [
                  5022,
                  5215
                ],
                [
                  5227,
                  5349
                ],
                [
                  5361,
                  6283
                ],
                [
                  6297,
                  6410
                ],
                [
                  6443,
                  6540
                ],
                [
                  6552,
                  6769
                ],
                [
                  6778,
                  6800
                ],
                [
                  6817,
                  6897
                ],
                [
                  6917,
                  7148
                ],
                [
                  7157,
                  7255
                ],
                [
                  7269,
                  8445
                ],
                [
                  8459,
                  8467
                ],
                [
                  8476,
                  8585
                ],
                [
                  8594,
                  8623
                ],
                [
                  8965,
                  8970
                ],
                [
                  8984,
                  9022
                ],
                [
                  9040,
                  9327
                ],
                [
                  9336,
                  9374
                ],
                [
                  9386,
                  9499
                ],
                [
                  9514,
                  9623
                ],
                [
                  9637,
                  9759
                ],
                [
                  9771,
                  10091
                ],
                [
                  10103,
                  10420
                ],
                [
                  10432,
                  10479
                ],
                [
                  10491,
                  10832
                ],
                [
                  10846,
                  11328
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "block-quote",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "本文所涉及的源代码都放在了 ",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 2
                    },
                    {
                      "text": "Github",
                      "link": true,
                      "url": "https://github.com/tuture-dev/typescript-tea",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 3
                    },
                    {
                      "text": "  或者 ",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 4
                    },
                    {
                      "text": "Gitee",
                      "link": true,
                      "url": "https://gitee.com/tuture/typescript-tea",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 5
                    },
                    {
                      "text": " 上，如果您觉得我们写得还不错，希望您能给",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 6
                    },
                    {
                      "text": "❤️这篇文章点赞+",
                      "bold": true,
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 7
                    },
                    {
                      "text": "Github",
                      "bold": true,
                      "link": true,
                      "url": "https://github.com/tuture-dev/typescript-tea",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 8
                    },
                    {
                      "text": " 或 ",
                      "bold": true,
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 9
                    },
                    {
                      "text": "Gitee",
                      "bold": true,
                      "link": true,
                      "url": "https://gitee.com/tuture/typescript-tea",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 10
                    },
                    {
                      "text": " 仓库加星❤",
                      "bold": true,
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 11
                    },
                    {
                      "text": "️哦~",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 12
                    }
                  ]
                }
              ]
            },
            {
              "type": "image",
              "url": "https://user-gold-cdn.xitu.io/2019/12/19/16f1ddb37a4d47a8?w=900&h=500&f=png&s=138401",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "2726f1094dd6830a85bfe273da795628856b00dd",
      "id": "luz5AxX0g",
      "articleId": "C_ao1Yvqy",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "children": [
            {
              "text": "TypeScript 初探"
            }
          ],
          "id": "lAhxZu6Sc"
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "正式 TS 时间☕️，TS 是一门静态编程语言，它是 JavaScript 的超集。首先我们先来解释一下什么是编程语言，然后我们再来引出 TypeScript 是什么。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "编程语言是什么？"
                }
              ],
              "id": "TRfpkg57"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "那么什么是编程语言了？编程语言是用来定义计算机程序的形式语言。它是一种被标准化的交流技巧，用来向计算机发出指令。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们拿 JS 来举例，一门标准的编程语言一般包含如下几个部分："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "数据结构：如原始数据类型 string/number/void 等，非原始数据类型 array/object/enum 等"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "控制结构：如 if/else 、 switch 、while、for 循环等"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "组织结构：如 函数、类"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "特性：如 JS 的原型链"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "常用的 API：如 isNaN 判断是不是非数字，toFixed 将小数进行四舍五入操作"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "运行环境：如 浏览器端的 JavaScript、服务器端的 Node"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "其中前五种又称为语言内核，也就是我们常常喊的 ECMAScript 2015，或者 ES6；最后一个运行环境在浏览器端结合 BOM/DOM 即成为 JavaScript，在服务器端结合一些文件/网络的操作即成为 Node。"
                }
              ],
              "level": 0,
              "parent": "bulleted-list"
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "TypeScript 是什么？"
                }
              ],
              "level": 0,
              "parent": "bulleted-list",
              "id": "jjX8lRqy"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "而 TS，作为 JavaScript 的超集，包含着两类属性："
                }
              ],
              "level": 0,
              "parent": "bulleted-list"
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "属于 JavaScript 端的编程语言特性，使得我们可以执行各种 JavaScript 相关的操作：变量声明、编写 if/else 控制流、使用循环处理重复任务、使用函数执行特定的任务块、使用类来组织和复用代码和模拟真实世界的操作等，还有新特性比如：装饰器、Iterator、Generator 这些。这类特性在此篇文章中，我们默认你已经很清楚了，不会做过多的讲解。"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "属于 TypeScript 端独有的特性：类型，它也具有一套编程语言的特性，比如标志一个变量是 string 类型，一个函数的参数有三个，它们的类型分别是 string/number/boolean，返回类型为 never等，这是基础类型，我们甚至可以基于类型进行编程，使用类型版本的控制、组织结构来完成高级类型的编写，进而将类型附着在 JavaScript 对应的编程语言特性上，将 JS 静态化，使得我们可以在编译期间就能发现类型上的错误，这一特性是我们本篇文章的重点。"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "好的，读到这里，相比很多读者已经清楚了，其实 TS 没什么神秘的，主要就是设计了一套类似编程语言的类型语言，然后将这些类型附着在原 JavaScript 的语言之上，给其加上类型限制使得其静态化，进而可以快速的在编写时发现很多潜在的问题，帮助我们编写错误率更低，更适合团队协作的代码，这也是 TypeScript 适合编写大型的业务应用的原因。"
                }
              ],
              "level": 0,
              "parent": "bulleted-list"
            }
          ],
          "flag": "step_start"
        },
        {
          "type": "file",
          "file": ".gitignore",
          "display": false,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": ".gitignore",
              "commit": "2726f1094dd6830a85bfe273da795628856b00dd",
              "hiddenLines": [
                [
                  0,
                  19
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.tsx",
          "display": true,
          "commit": "2726f1094dd6830a85bfe273da795628856b00dd",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "类型语言之数据结构"
                    }
                  ],
                  "id": "1MeWB7ct"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "其中 TS 数据结构又包含原始类型、非原始类型、特殊类型和高级类型等几类。我们将结合在 TS 类型侧的定义，以及附着在 JS 上进行实战来讲解。"
                    }
                  ],
                  "id": "VFSX4T8K"
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "原始类型"
                    }
                  ],
                  "id": "4DfVlkTX"
                },
                {
                  "type": "heading-five",
                  "children": [
                    {
                      "text": "TS 类型侧的定义"
                    }
                  ],
                  "id": "pECJ_JAf"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "和 JS 中的原始数据类型一样，TS 对应着一致的类型定义，包括下面八种："
                    }
                  ],
                  "id": "3PnEoSPs"
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "number"
                        }
                      ],
                      "id": "3PnEoSPs",
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "string"
                        }
                      ],
                      "id": "3PnEoSPs",
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "boolean"
                        }
                      ],
                      "id": "3PnEoSPs",
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "null"
                        }
                      ],
                      "id": "3PnEoSPs",
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "undefined"
                        }
                      ],
                      "id": "3PnEoSPs",
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "void"
                        }
                      ],
                      "id": "3PnEoSPs",
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "symbol"
                        }
                      ],
                      "id": "3PnEoSPs",
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "bigint"
                        }
                      ],
                      "id": "3PnEoSPs",
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "其中前六种是 ES5 中就有的，symbol 从 ES6 开始引入，bigint 是 ES2020 新引进的。"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "上面是 TS 的原始类型，我们之前提到 TS 就是将类型附着在 JS 上，将其类型化，那么我们来看看上面的原始类型如何附着在 JS 上，将其类型化。"
                    }
                  ],
                  "id": "3PnEoSPs",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "heading-five",
                  "children": [
                    {
                      "text": "附着在 JS 上的实战"
                    }
                  ],
                  "id": "hMl-WdE9",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "TS 通过独特的"
                    },
                    {
                      "text": "冒号语法",
                      "bold": true
                    },
                    {
                      "text": "来将其类型侧定义的类型附着在 JS 上，我们来看几个例子："
                    }
                  ],
                  "id": "7do0GePQ",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "用 JS 语言来写图雀社区的 Slogan，我们一般会这么写："
                    }
                  ],
                  "id": "7do0GePQ",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "code-block",
                  "lang": "js",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const tutureSlogan = '图雀社区，汇聚精彩的免费实战教程';"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们可以确定，这句 Slogan 是一个 string 类型的，所以我们用对应的 TS 类型附着在其变量定义上如下："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "typescript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const tutureSlogan: string = '图雀社区，汇聚精彩的免费实战教程';"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这样我们就给原 JS 的 "
                    },
                    {
                      "text": "tutureSlogan",
                      "code": true
                    },
                    {
                      "text": "  变量加上了类型定义，它是一个 "
                    },
                    {
                      "text": "string",
                      "code": true
                    },
                    {
                      "text": "  类型的变量，通过这样的操作，原 JS 变量的类型就被静态化了，在初始化时，就不能再赋值其他的类型给这个 "
                    },
                    {
                      "text": "tutureSlogan",
                      "code": true
                    },
                    {
                      "text": " 变量了，比如我们将 "
                    },
                    {
                      "text": "number",
                      "code": true
                    },
                    {
                      "text": " 类型的字面量赋值给 "
                    },
                    {
                      "text": "tutureSlogan",
                      "code": true
                    },
                    {
                      "text": " ，就会报错："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const tutureSlogan: string = 5201314 // 报错 Type '5201314' is not assignable to Type 'string'"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这就是 TS 的强大之处，当团队编码时事先约定好数据的类型，那么后续编写并调用这些设置好类型的变量时就会强制起约束作用，就像上面的代码一样，如果给 "
                    },
                    {
                      "text": "tutureSlogan",
                      "code": true
                    },
                    {
                      "text": " 赋值  "
                    },
                    {
                      "text": "5201314",
                      "code": true
                    },
                    {
                      "text": " 就会报错，其实你大可克制一点对吧😌，给 "
                    },
                    {
                      "text": "5201314",
                      "code": true
                    },
                    {
                      "text": " 加个限制，两边带上引号 "
                    },
                    {
                      "text": "'5201314'",
                      "code": true
                    },
                    {
                      "text": " 问题就迎刃而解了，爱也可以是克制🤓。"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "有些细心的同学可能对上面的报错信息有点不能理解，对于报错信息的后半段类型 "
                        },
                        {
                          "text": "string",
                          "code": true
                        },
                        {
                          "text": " 可能理解，因为我们给 "
                        },
                        {
                          "text": "tutureSlogan",
                          "code": true
                        },
                        {
                          "text": " 限制了 "
                        },
                        {
                          "text": "string",
                          "code": true
                        },
                        {
                          "text": " 类型，但是对于我们的赋值 "
                        },
                        {
                          "text": "5201314",
                          "code": true
                        },
                        {
                          "text": " ，它原本是一个 JS 的 number 类型的字面量，为什么也成了 "
                        },
                        {
                          "text": "Type",
                          "code": true
                        },
                        {
                          "text": " 了？"
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "那是因为，TS 引擎在对语句进行编译的时候，会对变量赋值两端做一个类型推理，比如对赋值语句的右侧 "
                        },
                        {
                          "text": "5201314",
                          "code": true
                        },
                        {
                          "text": " ，会将其推理成 "
                        },
                        {
                          "text": "5201314",
                          "code": true
                        },
                        {
                          "text": " 这个类型，它是一个属于 "
                        },
                        {
                          "text": "number",
                          "code": true
                        },
                        {
                          "text": " 类型的一个特殊的 "
                        },
                        {
                          "text": "number",
                          "code": true
                        },
                        {
                          "text": " 类型，可以被分配（"
                        },
                        {
                          "text": "assignable",
                          "code": true
                        },
                        {
                          "text": " )给 "
                        },
                        {
                          "text": "number",
                          "code": true
                        },
                        {
                          "text": " 类型的变量，这里的 "
                        },
                        {
                          "text": "assignable",
                          "code": true
                        },
                        {
                          "text": " 是可分配的意思，就是一个子类型可以被分配给一个父类型，比如数字 1 可以被分配给 number 数字类型，但因为 number 类型和 string 类型是冲突的，所以这里报错了。"
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "这里读者可能会有感觉了就是，你写的 JS 语句，加上类型定义之后，在 TS 编译器的世界里，一切皆类型了，它会以一种类型的视角去看待原 JS 语句，比如上面的语句，在 TS 编译器眼里，就是 "
                        },
                        {
                          "text": "5201314",
                          "code": true
                        },
                        {
                          "text": " 类型和 "
                        },
                        {
                          "text": "string",
                          "code": true
                        },
                        {
                          "text": " 类型的一个比较过程，如果比较一致，那么好的，我 TS 编译器今天就放你一马，让你逍遥快活。"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "heading-five",
                  "children": [
                    {
                      "text": "小结"
                    }
                  ],
                  "id": "ZrUJ76oF"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们上面说到了 TS 的原始类型，一共有八个之多，并且通过其中的 "
                    },
                    {
                      "text": "string",
                      "code": true
                    },
                    {
                      "text": " 类型来讲解了如何将 TS 类型附着在原 JS 语法上以静态化 JS 语言，剩下的 7 个原始类型的用法和 "
                    },
                    {
                      "text": "string",
                      "code": true
                    },
                    {
                      "text": " 类型类似，我们将在之后的讲解中逐渐用到其中的类型。"
                    }
                  ],
                  "id": "L39OuNRO"
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "非原始类型"
                    }
                  ],
                  "id": "CDyvM04B"
                },
                {
                  "type": "heading-five",
                  "children": [
                    {
                      "text": "TS 类型侧的定义"
                    }
                  ],
                  "id": "JVoZYqep"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "同样的 JS 中的非原始数据类型一样，TS 中也存在非原始类型，表示出了八种原始类型之外的类型，非原始类型也称为是 "
                    },
                    {
                      "text": "object",
                      "code": true
                    },
                    {
                      "text": " 类型。"
                    }
                  ],
                  "id": "fY0-6sPp"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "实际上 TS 中还有几个常见的非原始类型，例举如下："
                    }
                  ],
                  "id": "fY0-6sPp"
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "array"
                        }
                      ],
                      "id": "fY0-6sPp",
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "tuple"
                        }
                      ],
                      "id": "fY0-6sPp",
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "enum"
                        }
                      ],
                      "id": "fY0-6sPp",
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "且因为它们属于 "
                    },
                    {
                      "text": "object",
                      "code": true
                    },
                    {
                      "text": " 类型，所以 "
                    },
                    {
                      "text": "object",
                      "code": true
                    },
                    {
                      "text": " 类型实际上就代表了非原始类型。在上面的三个类型以及其父类型 "
                    },
                    {
                      "text": "object",
                      "code": true
                    },
                    {
                      "text": " 中，"
                    },
                    {
                      "text": "array",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "object",
                      "code": true
                    },
                    {
                      "text": " 其实我们应该有点熟悉，至于 "
                    },
                    {
                      "text": "tuple",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "enum",
                      "code": true
                    },
                    {
                      "text": " 则是 TS 中新增的类型，JS 中正式提案中目前是没有的。讲完了类型侧定义，我们马上来实践一下上面的 "
                    },
                    {
                      "text": "array",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "enum",
                      "code": true
                    },
                    {
                      "text": " 非原始类型。"
                    }
                  ],
                  "id": "fY0-6sPp",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "heading-five",
                  "children": [
                    {
                      "text": " array 类型附着实战"
                    }
                  ],
                  "id": "aTWmrSy4",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "其中 "
                    },
                    {
                      "text": "array",
                      "code": true
                    },
                    {
                      "text": " 类型我们比较熟悉，但这里有个不同就是之前我们的 JS 因为是动态语言，所以一个数组里面可以有各种不同的数据类型项，比如我们看如下 JS 语句："
                    }
                  ],
                  "id": "fY0-6sPp",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "code-block",
                  "lang": "js",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const arr = ['1', 2, '3'];"
                        }
                      ],
                      "id": "fY0-6sPp",
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，从 TS 的角度去看这个数组变量 "
                    },
                    {
                      "text": "arr",
                      "code": true
                    },
                    {
                      "text": " 所包含的类型，存在字符串类型 "
                    },
                    {
                      "text": "'1'",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "'3'",
                      "code": true
                    },
                    {
                      "text": " ，以及数字类型 "
                    },
                    {
                      "text": "2",
                      "code": true
                    },
                    {
                      "text": " 。但 TS 总的数组类型要求数组中的元素都是同一个类型，不允许动态变化，比如我们为上面的数组变量 "
                    },
                    {
                      "text": "arr",
                      "code": true
                    },
                    {
                      "text": " 声明类型应该如下："
                    }
                  ],
                  "id": "fY0-6sPp",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const arr: string[] = ['1', '2', '3'];"
                        }
                      ],
                      "id": "fY0-6sPp",
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们给变量 "
                    },
                    {
                      "text": "arr",
                      "code": true
                    },
                    {
                      "text": " 声明了 "
                    },
                    {
                      "text": "string[]",
                      "code": true
                    },
                    {
                      "text": " 类型，即一个 "
                    },
                    {
                      "text": "string",
                      "code": true
                    },
                    {
                      "text": " 类型后面跟着一个数组标志，表示是字符串数组类型，当声明了 "
                    },
                    {
                      "text": "string[]",
                      "code": true
                    },
                    {
                      "text": " 类型之后，我们需要把之前的数组 "
                    },
                    {
                      "text": "2",
                      "code": true
                    },
                    {
                      "text": " 改成字符串 "
                    },
                    {
                      "text": "'2'",
                      "code": true
                    },
                    {
                      "text": " 。"
                    }
                  ],
                  "id": "fY0-6sPp",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们注意到 "
                    },
                    {
                      "text": "array",
                      "code": true
                    },
                    {
                      "text": " 类型，它要求数组中每项的类型都一样，一般应用在数组的长度未知的情况，用特定的类型，比如 "
                    },
                    {
                      "text": "string",
                      "code": true
                    },
                    {
                      "text": " 类型来约束数组的每一项。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然而从 JS 转过来的同学大多数同学可能对这个 "
                    },
                    {
                      "text": "array",
                      "code": true
                    },
                    {
                      "text": " 类型不适应了，我们 JS 的同学经常会遇到编写一个数组，其中的多项的类型不一样，就和我们上面的 JS "
                    },
                    {
                      "text": "arr",
                      "code": true
                    },
                    {
                      "text": " 的项一样，既有 "
                    },
                    {
                      "text": "string",
                      "code": true
                    },
                    {
                      "text": " 类型又有 "
                    },
                    {
                      "text": "number",
                      "code": true
                    },
                    {
                      "text": " 类型，那这该怎么办了？还好！TS 的设计者也为我们考虑到了这一点，那就是我们下面要讲到的 "
                    },
                    {
                      "text": "tuple",
                      "code": true
                    },
                    {
                      "text": "  （元组）类型。"
                    }
                  ]
                },
                {
                  "type": "heading-five",
                  "children": [
                    {
                      "text": "tuple 类型附着实战"
                    }
                  ],
                  "id": "Mn_OeURj",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "大家可能对 "
                    },
                    {
                      "text": "tuple",
                      "code": true
                    },
                    {
                      "text": " （元组）类型很陌生了，其实元是一种特殊的数组类型，它主要用于这样的场景：“一个数组的项数已知，其中每项的类型也已知”，这句话说起来可能比较绕，我们用上面讲数组的例子来讲元祖："
                    }
                  ],
                  "id": "tEgIUypM",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "code-block",
                  "lang": "typescript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const arr = ['1', 2, '3'];"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们知道上面的数组第一项和第三项的类型为 "
                    },
                    {
                      "text": "string",
                      "code": true
                    },
                    {
                      "text": " 类型，第二项的类型为 "
                    },
                    {
                      "text": "number",
                      "code": true
                    },
                    {
                      "text": " 类型，现在我们要给这个 "
                    },
                    {
                      "text": "arr",
                      "code": true
                    },
                    {
                      "text": " 附着一个类型，使得其静态化。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这个条件满足我们上面说的元组的适用场景，我们通过给 "
                    },
                    {
                      "text": "arr",
                      "code": true
                    },
                    {
                      "text": " 一个对应的元组类型，让我们可以保持上面的写法不变："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const arr: [string, number, string] = ['1', 2, '3'];"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，元组就是形如 "
                    },
                    {
                      "text": "[type1, type2, type3, ...., typen]",
                      "code": true
                    },
                    {
                      "text": " 这样数组长度已知，且类型已知的情况，其中 "
                    },
                    {
                      "text": "type1",
                      "code": true
                    },
                    {
                      "text": " 到 "
                    },
                    {
                      "text": "typen",
                      "code": true
                    },
                    {
                      "text": " 中所有的类型都可以不一样。"
                    }
                  ]
                },
                {
                  "type": "heading-five",
                  "children": [
                    {
                      "text": "小结"
                    }
                  ],
                  "id": "AE-5CX8J"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在这一小结中我们讲解了一下什么是非原始类型，然后说明了在 TS 中有四种非原始类型，其中有一种代表非原始类型 "
                    },
                    {
                      "text": "object",
                      "code": true
                    },
                    {
                      "text": " ，然后剩下的三种属于 "
                    },
                    {
                      "text": "object",
                      "code": true
                    },
                    {
                      "text": " 类型。"
                    }
                  ],
                  "id": "rbGSODFa"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着我们通过实践讲解了 "
                    },
                    {
                      "text": "array",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "tuple",
                      "code": true
                    },
                    {
                      "text": " 类型，对于 "
                    },
                    {
                      "text": "enum",
                      "code": true
                    },
                    {
                      "text": " 类型和 "
                    },
                    {
                      "text": "object",
                      "code": true
                    },
                    {
                      "text": " 类型本身，我们将留在之后的章节来讲，敬请期待✌️。"
                    }
                  ],
                  "id": "rbGSODFa"
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "特殊类型"
                    }
                  ],
                  "id": "g12DoJJ0"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "TS 中还有几个常用的特殊类型，它们是 "
                    },
                    {
                      "text": "any",
                      "code": true
                    },
                    {
                      "text": " 、"
                    },
                    {
                      "text": "unknown",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "never",
                      "code": true
                    },
                    {
                      "text": " ，其中 "
                    },
                    {
                      "text": "never",
                      "code": true
                    },
                    {
                      "text": " 类型一般会伴随着和函数的类型声明一起使用，所以我们将 "
                    },
                    {
                      "text": "never",
                      "code": true
                    },
                    {
                      "text": " 类型的时候会提到函数的类型如何进行声明。"
                    }
                  ],
                  "id": "vy-D-R6H"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接下来我们来讲一讲这三个类型的含义和应用。"
                    }
                  ],
                  "id": "vy-D-R6H"
                },
                {
                  "type": "heading-five",
                  "children": [
                    {
                      "text": "any 类型定义与实战"
                    }
                  ],
                  "id": "Ggm5OHfI"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "any",
                      "code": true
                    },
                    {
                      "text": " 的字面含义是 “任何”，主要用于在编码的时候不知道一个变量的类型，所以先给它加一个 "
                    },
                    {
                      "text": "any",
                      "code": true
                    },
                    {
                      "text": " 类型定义，表示它可以是任何类型，一般留待后续确认此变量类型之后再将 "
                    },
                    {
                      "text": "any",
                      "code": true
                    },
                    {
                      "text": " 改为具体的类型。"
                    }
                  ],
                  "id": "vy-D-R6H"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们来看一个例子，比如我们有下面一段 TS 变量定义语句："
                    }
                  ],
                  "id": "vy-D-R6H"
                },
                {
                  "type": "code-block",
                  "lang": "js",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "let demand: any;"
                        }
                      ],
                      "id": "vy-D-R6H"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "因为有时候产品给一个需求，要我们去开发一个新功能，给了设计稿，但是没交接清楚，对于设计稿有一些内容我们想提前做，但是因为不清楚具体的类型，比如这里的 "
                    },
                    {
                      "text": "demand",
                      "code": true
                    },
                    {
                      "text": " ，所以我们这里给 "
                    },
                    {
                      "text": "demand",
                      "code": true
                    },
                    {
                      "text": " 一个 "
                    },
                    {
                      "text": "any",
                      "code": true
                    },
                    {
                      "text": " 类型，然后继续做其他的内容，这样既不会出错，也不会影响其他的开发进度。"
                    }
                  ],
                  "id": "vy-D-R6H"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "等到产品把具体的上下文交代清楚了，诶！我们清楚了知道这个 "
                    },
                    {
                      "text": "demand",
                      "code": true
                    },
                    {
                      "text": " 的类型了，我们就可以回过头来给其附着一个严格的类型定义，比如我们知道它是 "
                    },
                    {
                      "text": "string",
                      "code": true
                    },
                    {
                      "text": " 类型，那么我们再返回来对其修改如下："
                    }
                  ],
                  "id": "vy-D-R6H"
                },
                {
                  "type": "code-block",
                  "lang": "typescript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "let demand: string;"
                        }
                      ],
                      "id": "vy-D-R6H"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "就是这样，"
                    },
                    {
                      "text": "any",
                      "code": true
                    },
                    {
                      "text": " 的应用场景大多是这样的。但是玩 TS 的朋友要小心哦，不要一碰到不确定的就写个 "
                    },
                    {
                      "text": "any",
                      "code": true
                    },
                    {
                      "text": " 类型，然后写了之后还不改，那就把 TS 用成了 AnyScript 了，这就和 JS 一样了😉。所以你看呀，TS 的优秀之处在于，你完全可以在 TS 的环境中写 JS 还能享受 TS 带来的各种静态语言的优势，所以这么受欢迎也是可以理解滴。"
                    }
                  ],
                  "id": "vy-D-R6H"
                },
                {
                  "type": "heading-five",
                  "children": [
                    {
                      "text": "unknown 类型定义与实战"
                    }
                  ],
                  "id": "3h5TlpUy"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "unknown",
                      "code": true
                    },
                    {
                      "text": " 类型和 "
                    },
                    {
                      "text": "any",
                      "code": true
                    },
                    {
                      "text": " 都可以表示任何类型，应用场景也和上面类型，但是它更安全。那么具体安全在哪里了？我们通过一个例子来看一看："
                    }
                  ],
                  "id": "PAP_Od1A"
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "let demandOne: any;"
                        }
                      ],
                      "id": "PAP_Od1A"
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "let demandTwo: unknown;"
                        }
                      ],
                      "id": "PAP_Od1A"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们拿到了开发需求，但是不清楚具体类型又打算继续开发时，上面两种情况都可以使用，但是当我们具体使用这两个变量的时候，"
                    },
                    {
                      "text": "any",
                      "code": true
                    },
                    {
                      "text": " 类型的变量是可以进行任意进行赋值、实例化、函数执行等操作，但是 "
                    },
                    {
                      "text": "unknown",
                      "code": true
                    },
                    {
                      "text": " 只允许赋值，不允许实例化、函数执行等操作，我们来看个例子："
                    }
                  ],
                  "id": "PAP_Od1A"
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "demandOne = 'Hello, Tuture'; // 可以的"
                        }
                      ],
                      "id": "PAP_Od1A"
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "demandTwo = 'Hello, Ant Design'; // 可以的"
                        }
                      ],
                      "id": "PAP_Od1A"
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ],
                      "id": "PAP_Od1A"
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "demandOne.foo.bar() // 可以的"
                        }
                      ],
                      "id": "PAP_Od1A"
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "demandTwo.foo.bar() // 报错"
                        }
                      ],
                      "id": "PAP_Od1A"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，"
                    },
                    {
                      "text": "unknown",
                      "code": true
                    },
                    {
                      "text": " 类型只允许赋值操作，不允许对象取值（Getter)   、函数执行等操作，所以它更安全。"
                    }
                  ],
                  "id": "PAP_Od1A"
                },
                {
                  "type": "heading-five",
                  "children": [
                    {
                      "text": "never / 函数类型定义与实战"
                    }
                  ],
                  "id": "QnNEfVKf"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "code": true,
                      "text": "never"
                    },
                    {
                      "text": " 的字面意思是 “永不”，在 TS 中代表不存在的值类型，一般用于给函数进行类型声明，函数绝不会有返回值的时候使用，比如函数内抛出错误，我们首先看个例子将讲解一下如何给函数进行类型声明，然后接着我们讲  "
                    },
                    {
                      "code": true,
                      "text": "never"
                    },
                    {
                      "text": " 类型如何使用："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "typescript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "function responseError(message) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  // ... 具体操作，接收信息，抛出错误"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "对于上面的函数，我们可以使用箭头函数的形式把它抽象成为形如 "
                    },
                    {
                      "code": true,
                      "text": "(args1, args2, ... , argsn) => returnValue"
                    },
                    {
                      "text": " ，我们主要关注点在于函数的输入和输出，所以我们在类型声明的时候把函数的输入参数的类型和输出结果的类型定义好就可以了。我们注意到上面我们定义的函数有一个参数： "
                    },
                    {
                      "code": true,
                      "text": "message"
                    },
                    {
                      "text": "  ，并且函数体内根据 "
                    },
                    {
                      "code": true,
                      "text": "message"
                    },
                    {
                      "text": " 抛出对应的错误，那么我们来给它进行类型声明如下："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "typescript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "function responseError(message: string): never {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  // ... 具体操作，接收信息，抛出错误"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "动手实践"
                    }
                  ],
                  "id": "98dFe3UQ"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "基本了解了类型语言的数据结构之后，我们马上来写一点 React 代码来实践我们学到的知识。"
                    }
                  ],
                  "id": "ysT999T-"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们之前准备的代码中可以看到，有两个假数据数组 "
                    },
                    {
                      "text": "todoListData",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "userList",
                      "code": true
                    },
                    {
                      "text": " ，我们使用之前学到的知识来给这两个数组进行类型定义，打开 "
                    },
                    {
                      "text": "src/App.tsx",
                      "code": true
                    },
                    {
                      "text": " 对其中的内容作出对应的修改如下："
                    }
                  ],
                  "id": "ysT999T-"
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "src/App.tsx",
              "commit": "2726f1094dd6830a85bfe273da795628856b00dd",
              "hiddenLines": [
                [
                  0,
                  22
                ],
                [
                  44,
                  67
                ],
                [
                  72,
                  96
                ],
                [
                  99,
                  189
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面我们定义了两个 "
                    },
                    {
                      "text": "interface",
                      "code": true
                    },
                    {
                      "text": "  Todo 和 User，然后以数组类型的方式对 "
                    },
                    {
                      "text": "todoListData",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "userList",
                      "code": true
                    },
                    {
                      "text": " 进行注解，表示 "
                    },
                    {
                      "text": "todoListData",
                      "code": true
                    },
                    {
                      "text": " 是 "
                    },
                    {
                      "text": "Todo[]",
                      "code": true
                    },
                    {
                      "text": " 类型，"
                    },
                    {
                      "text": "userList",
                      "code": true
                    },
                    {
                      "text": " 是 "
                    },
                    {
                      "text": "User",
                      "code": true
                    },
                    {
                      "text": " 类型。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里的 "
                    },
                    {
                      "text": "interface",
                      "code": true
                    },
                    {
                      "text": " 我们还没用提到，我们将马上在后面讲到，可以理解它类似 JS 中的对象，用来组织一组类型，就比如我们这里  "
                    },
                    {
                      "text": "todoList",
                      "code": true
                    },
                    {
                      "text": " 中单个元素实际上是包含四个属性的对象，其中前三个属性为 "
                    },
                    {
                      "text": "string",
                      "code": true
                    },
                    {
                      "text": " 原始类型，最后一个属性为 "
                    },
                    {
                      "text": "boolean",
                      "code": true
                    },
                    {
                      "text": " 类型，所以我们为了给 单个对象元素进行类型注解，我们使用了 "
                    },
                    {
                      "text": "interface",
                      "code": true
                    },
                    {
                      "text": " 。"
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        }
      ]
    },
    {
      "commit": "c19a68c181fd97f289ec5049355bcdfc48b30570",
      "id": "n-5jKURDa",
      "articleId": "C_ao1Yvqy",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "c19a68c181fd97f289ec5049355bcdfc48b30570",
          "id": "ZOeJySOHG",
          "fixed": true,
          "children": [
            {
              "text": "枚举和接口"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在上一节中我们提到了 "
                },
                {
                  "text": "interface",
                  "code": true
                },
                {
                  "text": " ，当时没有细讲，这一节我们就先来细细说一下 "
                },
                {
                  "text": "interface",
                  "code": true
                },
                {
                  "text": " 是什么？"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "Interface"
                }
              ],
              "id": "dvc3N2G_4"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "它相当于类型中的 JS 对象，用于对函数、类等进行结构类型检查，所谓的结构类型检查，就是两个类型的结构一样，那么它们的类型就是兼容的，这在计算机科学的世界里也被成为 “鸭子类型”。"
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "什么鸭子类型？",
                      "bold": true
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们马上来看一个例子了解一个 "
                },
                {
                  "text": "Interface",
                  "code": true
                },
                {
                  "text": " 是怎么样的，比如我们之前对象 "
                },
                {
                  "text": "Todo",
                  "code": true
                },
                {
                  "text": " ，一个 Todo 对象如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "js",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const todo = {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  content: '图雀社区，汇聚精彩的免费技术教程';"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  user: 'mRcfps',"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  time: '图雀社区：汇聚精彩的免费实战教程',"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  isCompleted: false,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "现在我们要这个 todo 做一个类型注解，根据之前提到的 “鸭子类型” 的方式，我们可以定义一个 Interface 来为它做注解："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "interface Todo {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  content: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  user: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  time: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  isCompleted: boolean;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const todo: Todo = {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": " // ..."
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到我们的接口 "
                },
                {
                  "text": "Todo",
                  "code": true
                },
                {
                  "text": " 内容有四个字段，并且标注了这四个字段的类型，比如 "
                },
                {
                  "text": "content",
                  "code": true
                },
                {
                  "text": " 为 "
                },
                {
                  "text": "string",
                  "code": true
                },
                {
                  "text": " ，这个接口的样子和 "
                },
                {
                  "text": "todo",
                  "code": true
                },
                {
                  "text": " 对象是一样的，所以用 Interface  "
                },
                {
                  "text": "Todo",
                  "code": true
                },
                {
                  "text": "  来注解 "
                },
                {
                  "text": "todo",
                  "code": true
                },
                {
                  "text": " 是可行的，用 VSCode 的同学，应该可以看到我们这样写之后，编辑器里面没有抛出异常。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "可选属性"
                }
              ],
              "id": "fmu8CX393"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "上面我们讲到 Interface 是用来注解 对象，函数等，那么我们就有一个场景，一个对象里面的某些参数我们可能没有，比如一个待办事项 Todo，有时候没有设置 "
                },
                {
                  "text": "time",
                  "code": true
                },
                {
                  "text": " 时间属性，那么修饰这样一个对象我们该怎么办了？幸好 TS 给我们提供了可选属性这样一个方便的属性，使得我们可以方便解决上面的问题，我们来看一下可选属性该怎么写，假如我们上面的那个例子，"
                },
                {
                  "text": "time",
                  "code": true
                },
                {
                  "text": " 是可选的，那么我们可以写出如下这样："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "interface Todo {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  content: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  user: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  time?: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  isCompleted: boolean;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们看到，只需要在属性类型修饰冒号左边加一个问号就可以了，这个时候我们就告诉 TS 编译器这个 "
                },
                {
                  "text": "time",
                  "code": true
                },
                {
                  "text": " 属性是可选的一个类型，所以我们用上面的 Interface Todo 来注解一下没有 "
                },
                {
                  "text": "time",
                  "code": true
                },
                {
                  "text": " 属性的 "
                },
                {
                  "text": "todo",
                  "code": true
                },
                {
                  "text": " 对象如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const todo: Todo = {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  content: '予力内容创作，加速技术传播',"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  user: 'pftom',"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  isCompleted: false,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，使用 VSCode 来跟着教程敲的同学应该发现上面的内容没有错误，类型检查通过了。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "只读属性"
                }
              ],
              "id": "lnwatcHTL"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "TS 的 Interface 还有一些额外的属性比如只读属性（readonly），表示用相关带有只读属性的接口对某个 JS 元素做类型注解的时候，这个 JS 元素相关的属性被注解为只读属性时，我们之后不可以修改这个属性了，我们来看一个例子："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "interface Todo {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  content: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  readonly user: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  time?: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  isCompleted: boolean;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到只读属性的添加就是在属性之前加上 "
                },
                {
                  "text": "readonly",
                  "code": true
                },
                {
                  "text": " 关键字，就可以将 Interface 中的属性标志为已读的，我们来试验一下这个只读效果："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const todo: Todo = {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  content: '予力内容创作，加速技术传播',"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  user: 'pftom',"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  isCompleted: false,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "todo.user = 'mRcfps'"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "当我们进行上面的修改操作之后，编辑器内会报错："
                }
              ]
            },
            {
              "type": "image",
              "url": "https://imgkr.cn-bj.ufileos.com/b257ee2b-af70-4828-af63-bf49ba5c9bf7.png",
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "多余属性检查"
                }
              ],
              "id": "f3ectQc6c"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我在在 JS 中经常会遇到一个对象，一开始我们知道它有是哪个属性，但是它的属性却可以动态增加，比如我们的 "
                },
                {
                  "text": "todo",
                  "code": true
                },
                {
                  "text": " 可能还存在 "
                },
                {
                  "text": "priority",
                  "code": true
                },
                {
                  "text": " 优先级这样一个属性，那么我们如何定义一个可以注解动态增加属性对象的 Interface 了?"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "所幸 TS 提供一个多余属性检查的写法，使得上面的问题我们也可以解决，我们来看一下一个多余属性教程该怎么定义："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "interface Todo {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  isCompleted: boolean;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  [propName: string]: any;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "使用类似上面 JS 中的动态属性赋值的方式我们就可为 "
                },
                {
                  "text": "Todo",
                  "code": true
                },
                {
                  "text": " 接口加上多余属性检查，这里我们将其注解为一定拥有  "
                },
                {
                  "text": "isCompleted",
                  "code": true
                },
                {
                  "text": " 属性，其他的属性可以动态添加，因为动态添加的属性的值类型我们不清楚，所以我们用 "
                },
                {
                  "text": "any",
                  "code": true
                },
                {
                  "text": " 来表示值类型，它可以是任意类型。我们马上来试验一下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const todo: Todo = {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  content: '予力内容创作，加速技术传播',"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  isCompleted: false,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "todo.user = 'pftom';"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "todo.time = '2020-04-04';"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，上面我们我们的 todo 在定义的时候只有两个属性，后面我们额外添加了两个属性，发现编辑器里面也不会报错，这就是多余属性检查的魅力。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "Enum"
                }
              ],
              "id": "PBHoNYgZi"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "枚举是 TS 中独有的概念，在 JS 中没有，主要用于帮助定义一系列命名常量，常用于给一类变量做类型注解，它们的值是一组值里面的某一个，比如我们应用中参与创建待办事项的用户只有五个人，那么在创建待办事项时，此事项的所属用户是五人中的某一人。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们马上来看一个例子，我们的将这五个用户放到枚举里面："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "enum UserId {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  tuture,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  mRcfps,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  crxk,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  pftom,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  holy"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "进而我们可以改进一下我们在上节  Interface 里面的 "
                },
                {
                  "text": "Todo",
                  "code": true
                },
                {
                  "text": " 接口，给它的 "
                },
                {
                  "text": "user",
                  "code": true
                },
                {
                  "text": " 字段一个更精确的类型注解："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "interface Todo {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  content: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  user: UserId;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  time: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  isCompleted: boolean;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "通过上面的例子我们可以看到，"
                },
                {
                  "text": "todo",
                  "code": true
                },
                {
                  "text": "  里面的 "
                },
                {
                  "text": "user",
                  "code": true
                },
                {
                  "text": " 字段应该是五人之一，它有可能是 "
                },
                {
                  "text": "tuture",
                  "code": true
                },
                {
                  "text": " ，也有可能是 "
                },
                {
                  "text": "mRcfps",
                  "code": true
                },
                {
                  "text": " ，我们不知道，所以我们写了一个枚举 "
                },
                {
                  "text": "UserId",
                  "code": true
                },
                {
                  "text": " ，并用它来注解 "
                },
                {
                  "text": "Todo",
                  "code": true
                },
                {
                  "text": " 的 "
                },
                {
                  "text": "user",
                  "code": true
                },
                {
                  "text": " 字段。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "数字枚举"
                }
              ],
              "id": "VhbKUkpHH"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "上面我们的 UserId 中几个枚举值其实都对应着相应的数字，比如 "
                },
                {
                  "text": "UserId.tuture",
                  "code": true
                },
                {
                  "text": " 它的值是数字 "
                },
                {
                  "text": "0",
                  "code": true
                },
                {
                  "text": " ，"
                },
                {
                  "text": "UserId.mRcfps",
                  "code": true
                },
                {
                  "text": " 它的值是数字 "
                },
                {
                  "text": "1",
                  "code": true
                },
                {
                  "text": " ，以此类推，后面的几个枚举值分别是数字 "
                },
                {
                  "text": "2",
                  "code": true
                },
                {
                  "text": " ，"
                },
                {
                  "text": "3",
                  "code": true
                },
                {
                  "text": " ，"
                },
                {
                  "text": "4",
                  "code": true
                },
                {
                  "text": " 。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "当然我们也可以手动给其中某个枚举值赋值一个数字，这样这个枚举值后面的值会依次在这个赋值的数字上递增，我们来看个例子："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "enum UserId {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  tuture,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  mRcfps = 6,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  crxk,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  pftom,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  holy,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "上面我们的每个枚举值对应的数字依次是："
                },
                {
                  "text": "0",
                  "code": true
                },
                {
                  "text": " ，"
                },
                {
                  "text": "6",
                  "code": true
                },
                {
                  "text": " ，"
                },
                {
                  "text": "7",
                  "code": true
                },
                {
                  "text": " ，"
                },
                {
                  "text": "8",
                  "code": true
                },
                {
                  "text": " ，"
                },
                {
                  "text": "9",
                  "code": true
                },
                {
                  "text": " "
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "字符串枚举"
                }
              ],
              "id": "JljAuhslu"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "枚举的值除了是数字还可以是一系列字符串，比如："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "enum UserId {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  tuture = '66666666',"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  mRcfps = '23410977',"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  crxk = '25455350',"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  pftom = '23410976',"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  holy = '58352313',"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，我们给每个枚举值赋值了对于的字符串。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "异构枚举"
                }
              ],
              "id": "WG97kaIwj"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "当然在一个枚举里面既可以有字符串值也可以有数字："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "enum UserId {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  tuture = '66666666',"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  mRcfps = 6,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "动手实践"
                }
              ],
              "id": "CmjDGmWKD"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "了解了 "
                },
                {
                  "text": "Interface",
                  "code": true
                },
                {
                  "text": " 和 "
                },
                {
                  "text": "Enum",
                  "code": true
                },
                {
                  "text": " 之后，我们马上运用在我们的项目中来完善我们的待办事项应用。"
                }
              ]
            }
          ],
          "flag": "step_start"
        },
        {
          "file": "src/TodoInput.tsx",
          "display": true,
          "commit": "c19a68c181fd97f289ec5049355bcdfc48b30570",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "随着内容越写越多，我们的 "
                    },
                    {
                      "text": "src/App.tsx",
                      "code": true
                    },
                    {
                      "text": " 越来越复杂，所以我们打算把 "
                    },
                    {
                      "text": "TodoInput",
                      "code": true
                    },
                    {
                      "text": " 组件拆到单独的页面，在 "
                    },
                    {
                      "text": "src",
                      "code": true
                    },
                    {
                      "text": " 目录下新建 "
                    },
                    {
                      "text": "TodoInput.tsx",
                      "code": true
                    },
                    {
                      "text": " ，并在里面编写如下的内容："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "src/TodoInput.tsx",
              "commit": "c19a68c181fd97f289ec5049355bcdfc48b30570",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到上面的内容，主要有如下几个部分的修改："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们定义了新的 "
                        },
                        {
                          "text": "Interface",
                          "code": true
                        },
                        {
                          "text": " ："
                        },
                        {
                          "text": "TodoInputProps",
                          "code": true
                        },
                        {
                          "text": " ，它主要用来注解 "
                        },
                        {
                          "text": "TodoInput",
                          "code": true
                        },
                        {
                          "text": " 这个函数式组件的 "
                        },
                        {
                          "text": "props",
                          "code": true
                        },
                        {
                          "text": " 类型，可看到这个接口主要有两个字段，一个是 "
                        },
                        {
                          "text": "value",
                          "code": true
                        },
                        {
                          "text": " ，它是 "
                        },
                        {
                          "text": "TodoValue",
                          "code": true
                        },
                        {
                          "text": " 类型，还有一个 "
                        },
                        {
                          "text": "onChange",
                          "code": true
                        },
                        {
                          "text": " ，它是一个函数类型，表示父组件将会传递一个 "
                        },
                        {
                          "text": "onChange",
                          "code": true
                        },
                        {
                          "text": " 函数，我们将在之后讲解 TS 怎么注解函数，。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们新增了一个枚举 "
                        },
                        {
                          "text": "UserId",
                          "code": true
                        },
                        {
                          "text": " ，用来概括我们应用的五个用户的 ID，并且人为的为这五个枚举常量赋了对应的值。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们改进了定义了一个新 "
                        },
                        {
                          "text": "TodoValue",
                          "code": true
                        },
                        {
                          "text": " 接口，它有三个字段，主要用于标志 "
                        },
                        {
                          "text": "TodoInputProps",
                          "code": true
                        },
                        {
                          "text": " 中上层组件中可能传递下来的值，所以三个字段都是可选的"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们定义了三个响应 "
                        },
                        {
                          "text": "Input",
                          "code": true
                        },
                        {
                          "text": " 、"
                        },
                        {
                          "text": "Select",
                          "code": true
                        },
                        {
                          "text": " 、"
                        },
                        {
                          "text": "DatePicker",
                          "code": true
                        },
                        {
                          "text": " 的函数，"
                        },
                        {
                          "text": "onContentChange",
                          "code": true
                        },
                        {
                          "text": " ，"
                        },
                        {
                          "text": "onUserChange",
                          "code": true
                        },
                        {
                          "text": " ，"
                        },
                        {
                          "text": "onDateOk",
                          "code": true
                        },
                        {
                          "text": " ，当上层组件没有传递对应的属性时，使用 "
                        },
                        {
                          "text": "setXXX",
                          "code": true
                        },
                        {
                          "text": " 来更新 React 状态，否则触发 "
                        },
                        {
                          "text": "triggerChange",
                          "code": true
                        },
                        {
                          "text": " ，调用父组件传递下来的 "
                        },
                        {
                          "text": "onChange",
                          "code": true
                        },
                        {
                          "text": " 方法来更新对应的状态"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "上面我们从 "
                        },
                        {
                          "text": "./utils/data",
                          "code": true
                        },
                        {
                          "text": " 导入了 "
                        },
                        {
                          "text": "userList",
                          "code": true
                        },
                        {
                          "text": " ，以及导入了 "
                        },
                        {
                          "text": "Moment",
                          "code": true
                        },
                        {
                          "text": " 用来注解 "
                        },
                        {
                          "text": "moment",
                          "code": true
                        },
                        {
                          "text": " 类型的 date ，我们将在接下来的来马上来创建对于的 "
                        },
                        {
                          "text": "./utils/data",
                          "code": true
                        },
                        {
                          "text": " 文件以及安装对于的 "
                        },
                        {
                          "text": "moment",
                          "code": true
                        },
                        {
                          "text": " 。"
                        }
                      ]
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "package.json",
          "display": true,
          "commit": "c19a68c181fd97f289ec5049355bcdfc48b30570",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在 "
                    },
                    {
                      "text": "src/TodoInput.tsx",
                      "code": true
                    },
                    {
                      "text": " 中我们导入了 "
                    },
                    {
                      "text": "Moment",
                      "code": true
                    },
                    {
                      "text": " 用来注解 "
                    },
                    {
                      "text": "onDateOk",
                      "code": true
                    },
                    {
                      "text": " 的函数参数 "
                    },
                    {
                      "text": "date",
                      "code": true
                    },
                    {
                      "text": " ，接下来我们来安装它："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "npm install moment"
                        }
                      ]
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "package.json",
              "commit": "c19a68c181fd97f289ec5049355bcdfc48b30570",
              "hiddenLines": [
                [
                  0,
                  14
                ],
                [
                  22,
                  46
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "src/utils/data.ts",
          "display": true,
          "commit": "c19a68c181fd97f289ec5049355bcdfc48b30570",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着我们来创建对应的 "
                    },
                    {
                      "text": "src/utils/data.ts",
                      "code": true
                    },
                    {
                      "text": " 文件，把之前在 "
                    },
                    {
                      "text": "src/App.tsx",
                      "code": true
                    },
                    {
                      "text": " 里面的假数据统一放在这个文件里面，然后导出："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "src/utils/data.ts",
              "commit": "c19a68c181fd97f289ec5049355bcdfc48b30570",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "src/App.tsx",
          "display": true,
          "commit": "c19a68c181fd97f289ec5049355bcdfc48b30570",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "拆分了 "
                    },
                    {
                      "text": "TodoInput",
                      "code": true
                    },
                    {
                      "text": " ，并把假数据移动到单独的文件之后，我们需要修改 "
                    },
                    {
                      "text": "src/App.tsx",
                      "code": true
                    },
                    {
                      "text": " 对应的部分如下："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "src/App.tsx",
              "commit": "c19a68c181fd97f289ec5049355bcdfc48b30570",
              "hiddenLines": [
                [
                  105,
                  105
                ],
                [
                  129,
                  155
                ],
                [
                  166,
                  172
                ],
                [
                  184,
                  200
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面的内容主要做出了如下的修改："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们删除了对应的假数据 "
                        },
                        {
                          "text": "userList",
                          "code": true
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "text": "todoListData",
                          "code": true
                        },
                        {
                          "text": " 及其 Interface 定义 "
                        },
                        {
                          "text": "Todo",
                          "code": true
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "text": "User",
                          "code": true
                        },
                        {
                          "text": " ，转而从我们创建的 "
                        },
                        {
                          "text": "src/utils/data.ts",
                          "code": true
                        },
                        {
                          "text": " 里面导入 "
                        },
                        {
                          "text": "todoListData",
                          "code": true
                        },
                        {
                          "text": " "
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们删除了 "
                        },
                        {
                          "text": "TodoInput",
                          "code": true
                        },
                        {
                          "text": " 组件，转而导入我们之前创建的  "
                        },
                        {
                          "text": "TodoInput",
                          "code": true
                        },
                        {
                          "text": " 组件"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们给 "
                        },
                        {
                          "text": "Form",
                          "code": true
                        },
                        {
                          "text": " 表单部分加上了一个提交按钮，以及扩展了 "
                        },
                        {
                          "text": "onFinish",
                          "code": true
                        },
                        {
                          "text": " 函数"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们删除了一些不再需要的导包"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ],
              "id": "8mWHiRYKo"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "大功告成，这一节中我们学习了接口（Interface）和枚举（Enum），接口主要是对对象等多属性元素进行类型注解，而枚举是 TS 中独有的一个概念，在 JS 中没有，主要用于帮助定义一系列命名常量，常用于给一类变量做类型注解，它们的值是一组值里面的某一个，最后我们通过改进现有的 Todo 应用来实践了学到的这两个概念。"
                }
              ]
            },
            {
              "type": "block-quote",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "本文所涉及的源代码都放在了 ",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 2
                    },
                    {
                      "text": "Github",
                      "link": true,
                      "url": "https://github.com/tuture-dev/typescript-tea",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 3
                    },
                    {
                      "text": "  或者 ",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 4
                    },
                    {
                      "text": "Gitee",
                      "link": true,
                      "url": "https://gitee.com/tuture/typescript-tea",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 5
                    },
                    {
                      "text": " 上，如果您觉得我们写得还不错，希望您能给",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 6
                    },
                    {
                      "text": "❤️这篇文章点赞+",
                      "bold": true,
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 7
                    },
                    {
                      "text": "Github",
                      "bold": true,
                      "link": true,
                      "url": "https://github.com/tuture-dev/typescript-tea",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 8
                    },
                    {
                      "text": " 或 ",
                      "bold": true,
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 9
                    },
                    {
                      "text": "Gitee",
                      "bold": true,
                      "link": true,
                      "url": "https://gitee.com/tuture/typescript-tea",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 10
                    },
                    {
                      "text": " 仓库加星❤",
                      "bold": true,
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 11
                    },
                    {
                      "text": "️哦~",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 12
                    }
                  ]
                }
              ]
            },
            {
              "type": "image",
              "url": "https://user-gold-cdn.xitu.io/2019/12/19/16f1ddb37a4d47a8?w=900&h=500&f=png&s=138401",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ],
          "flag": "step_end"
        }
      ]
    },
    {
      "commit": "f24dc3125e7c6f41c1638a84b4e3dbfaf5d9a892",
      "id": "q6hjpT27I",
      "articleId": "H2r1tpF_v",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "f24dc3125e7c6f41c1638a84b4e3dbfaf5d9a892",
          "id": "n7grMd_y0",
          "fixed": true,
          "children": [
            {
              "text": "函数"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们在之前 "
                },
                {
                  "text": "TodoInputProps",
                  "code": true
                },
                {
                  "text": " 中对 "
                },
                {
                  "text": "onChange",
                  "code": true
                },
                {
                  "text": " 函数做了类型注解，当时我们没有详细讲解，在这一节中我们就来详细讲解一下 TS 中的函数。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "注解函数"
                }
              ],
              "id": "wH7dzRmcc"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "比如我们有如下的函数："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function add(x, y) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return x + y;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "那么我们该如何注解这个函数了？实际上函数主要的部分就是输入和输出，所以我们在注解函数的时候只需要注解函数的参数和返回值就可以了，因为上述的函数体内是是执行 "
                },
                {
                  "text": "x+y",
                  "code": true
                },
                {
                  "text": " 操作，以我们的 "
                },
                {
                  "text": "x",
                  "code": true
                },
                {
                  "text": " 和 "
                },
                {
                  "text": "y",
                  "code": true
                },
                {
                  "text": " 应该都是 "
                },
                {
                  "text": "number",
                  "code": true
                },
                {
                  "text": " 数字类型，返回值也是 "
                },
                {
                  "text": "number",
                  "code": true
                },
                {
                  "text": " 数字类型，所以我们对上面的函数进行类型注解如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function add(x: number, y: number): number {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return x + y;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到我们用冒号注解形式给 "
                },
                {
                  "text": "x",
                  "code": true
                },
                {
                  "text": " 和  "
                },
                {
                  "text": "y",
                  "code": true
                },
                {
                  "text": " 注解了 "
                },
                {
                  "text": "number",
                  "code": true
                },
                {
                  "text": " 类型，而对于返回值，我们直接以 "
                },
                {
                  "text": "add(): number",
                  "code": true
                },
                {
                  "text": " 的形式注解返回值。有时候返回值也可以不写，TS 可以根据参数类型和函数体计算返回值类型，也就是俗称的自动推断类型机制。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "函数类型"
                }
              ],
              "id": "MpicPuzuf"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "除了注解函数，有时候我们还涉及到将函数赋值给一个变量，比如如下的例子："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const add = function (x, y) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return x + y;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这个时候我们一般来注解 "
                },
                {
                  "text": "add",
                  "code": true
                },
                {
                  "text": " 时候，就需要使用函数类型来注解它，一个函数类型是形如："
                },
                {
                  "text": "(args1: type1, args2: type2, ..., args2: typen) => returnType",
                  "code": true
                },
                {
                  "text": " 的类型，所以对于上述的例子我们可以对其注解如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const add: (x: number, y: number): number =  function(x, y) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return x + y;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可能有同学有疑问了，这里我们给 "
                },
                {
                  "text": "add",
                  "code": true
                },
                {
                  "text": " 变量注解了函数类型，但是我们没有给后面的那个函数进行一个注解啊？其实 TS 会进行类型的自动推导，根据函数类型的结构对比后面的函数，会自动推断出后面函数的 "
                },
                {
                  "text": "x",
                  "code": true
                },
                {
                  "text": " ，"
                },
                {
                  "text": "y",
                  "code": true
                },
                {
                  "text": " 和返回值都为 "
                },
                {
                  "text": "number",
                  "code": true
                },
                {
                  "text": " 。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "可选参数"
                }
              ],
              "id": "BF8Oxp7CU"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "就像我们之前接口（Interface）中有可选属性一样，我们的函数中也存在可选参数，因为使用 TS 最大的好处之一就是尽可能的明确函数、接口等类型定义，方便其他团队成员很清晰了解代码的接口，大大提高团队协作的效率，所以如果一个函数可能存在一些参数，但是我们并不是每次都需要传递这些参数，那么它们就属于可选参数的范围。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们来看一下可选参数的例子，比如我们想写一个构造一个人姓名的函数，包含 "
                },
                {
                  "text": "firstName",
                  "code": true
                },
                {
                  "text": " 和 "
                },
                {
                  "text": "lastName",
                  "code": true
                },
                {
                  "text": " ，但是有时候我们不知道 "
                },
                {
                  "text": "lastName",
                  "code": true
                },
                {
                  "text": " ，那么这样一个函数该怎么写了？："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function buildName(firstName: string, lastName?: string) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  // ..."
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到上面我们构建一个人姓名的函数，必须得传递 "
                },
                {
                  "text": "firstName",
                  "code": true
                },
                {
                  "text": " 属性，但是因为 "
                },
                {
                  "text": "lastName",
                  "code": true
                },
                {
                  "text": " 可能有时候并不能获取到，所以把它设置为可选参数，所以以下几种函数调用方式都是可以的："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "buildName('Tom', 'Huang');"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "buildName('mRcfps');"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "重载"
                }
              ],
              "id": "D2ZcEAioZ"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "重载（Overloads）是 TS 独有的概念，在 JS 中没有，它主要为函数多返回类型服务，具体来说就是一个函数可能会在内部执行一个条件语句，根据不同的条件返回不同的值，这些值可能是不同类型的，那么这个时候我们该怎么来给返回值注解类型了？"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "答案就是使用重载，通过定义一系列同样函数名，不同参数列表和返回值的函数来注解多类型返回值函数，我们来看一个多类型返回的函数："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "let suits = [\"hearts\", \"spades\", \"clubs\", \"diamonds\"];"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function pickCard(x): any {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  // 如果 x 是 `object` 类型，那么我们返回 pickCard 从 myDeck 里面取出 pickCard1 数据"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  if (typeof x == \"object\") {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    let pickedCard = Math.floor(Math.random() * x.length);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return pickedCard;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  // 如果 x 是 `number` 类型，那么直接返回一个可以取数据的 pickCard2"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  else if (typeof x == \"number\") {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    let pickedSuit = Math.floor(x / 13);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return { suit: suits[pickedSuit], card: x % 13 };"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "let myDeck = ["
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  { suit: \"diamonds\", card: 2 },"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  { suit: \"spades\", card: 10 },"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  { suit: \"hearts\", card: 4 }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "];"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "let pickedCard1 = myDeck[pickCard(myDeck)];"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "alert(\"card: \" + pickedCard1.card + \" of \" + pickedCard1.suit);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "let pickedCard2 = pickCard(15);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "alert(\"card: \" + pickedCard2.card + \" of \" + pickedCard2.suit);"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "针对上面的这个例子，我们这个 "
                },
                {
                  "text": "pickCard",
                  "code": true
                },
                {
                  "text": " 函数根据 "
                },
                {
                  "text": "x",
                  "code": true
                },
                {
                  "text": " 的类型会有不同的返回类型，有的同学可能会有疑问了，之前我们不是说过，TS 能够根据参数类型和函数体自动推断返回值类型嘛？是的，之前那个例子参数类型只有一种选项，所以可以自动推断出返回值类型，但是这里的情况是：“参数类型可能有多种选项，对应不同选项的参数类型，会有不同的返回值类型，并且我们对参数类型还未知”。针对这种情况，我们直接解耦这个对应关系，使用重载就可以很好的表达出来："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "let suits = [\"hearts\", \"spades\", \"clubs\", \"diamonds\"];"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function pickCard(x: { suit: string; card: number }[]): number;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function pickCard(x: number): { suit: string; card: number };"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function pickCard(x): any {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  // 如果 x 是 `object` 类型，那么我们返回 pickCard 从 myDeck 里面取出 pickCard1 数据"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  if (typeof x == \"object\") {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    let pickedCard = Math.floor(Math.random() * x.length);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return pickedCard;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  // 如果 x 是 `number` 类型，那么直接返回一个可以取数据的 pickCard2"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  else if (typeof x == \"number\") {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    let pickedSuit = Math.floor(x / 13);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return { suit: suits[pickedSuit], card: x % 13 };"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "let myDeck = ["
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  { suit: \"diamonds\", card: 2 },"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  { suit: \"spades\", card: 10 },"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  { suit: \"hearts\", card: 4 }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "];"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "let pickedCard1 = myDeck[pickCard(myDeck)];"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "alert(\"card: \" + pickedCard1.card + \" of \" + pickedCard1.suit);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "let pickedCard2 = pickCard(15);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "alert(\"card: \" + pickedCard2.card + \" of \" + pickedCard2.suit);"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们可以看到这段代码比上面唯一多了的就是两端 "
                },
                {
                  "text": "function pickCard(x: type1): type2",
                  "code": true
                },
                {
                  "text": " 语句，所以重载实际上就是函数名一样，参数列表和返回值不一样，我们来解析一下上面多出的两个重载："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "第一个重载，我们给参数 "
                    },
                    {
                      "text": "x",
                      "code": true
                    },
                    {
                      "text": " 赋值了一个数组类型，数组的项是一个对象，对象包含两个属性 "
                    },
                    {
                      "text": "suit",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "card",
                      "code": true
                    },
                    {
                      "text": " ，它们的类型分别为 "
                    },
                    {
                      "text": "string",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "number",
                      "code": true
                    },
                    {
                      "text": " ；接着返回值类型为 "
                    },
                    {
                      "text": "number",
                      "code": true
                    },
                    {
                      "text": " 类型，这个对应 "
                    },
                    {
                      "text": "x",
                      "code": true
                    },
                    {
                      "text": " 的类型为 "
                    },
                    {
                      "text": "object",
                      "code": true
                    },
                    {
                      "text": " 时，返回类型为 "
                    },
                    {
                      "text": "number",
                      "code": true
                    },
                    {
                      "text": " 这种情况。"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "第二个重载，我们给参数 "
                    },
                    {
                      "text": "x",
                      "code": true
                    },
                    {
                      "text": " 赋值了一个 "
                    },
                    {
                      "text": "number",
                      "code": true
                    },
                    {
                      "text": " 类型，然后返回值类型是一个对象，它有两个属性 "
                    },
                    {
                      "text": "suit",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "card",
                      "code": true
                    },
                    {
                      "text": " ，对应的类型为 "
                    },
                    {
                      "text": "string",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "number",
                      "code": true
                    },
                    {
                      "text": " ；这个对应 "
                    },
                    {
                      "text": "x",
                      "code": true
                    },
                    {
                      "text": " 的类型为 "
                    },
                    {
                      "text": "number",
                      "code": true
                    },
                    {
                      "text": " 返回值类型为 "
                    },
                    {
                      "text": "object",
                      "code": true
                    },
                    {
                      "text": " 类型这种情况。"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            }
          ]
        },
        {
          "file": "src/utils/data.ts",
          "display": true,
          "commit": "f24dc3125e7c6f41c1638a84b4e3dbfaf5d9a892",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "动手实践"
                    }
                  ],
                  "id": "ODdoe_ztU"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "学习了 TS 的函数之后，我们马上来运用在我们的 待办事项 应用里面，首先我们打开 "
                    },
                    {
                      "text": "src/utils/data.ts",
                      "code": true
                    },
                    {
                      "text": " 对其中的数据做一点修改："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/utils/data.ts",
              "commit": "f24dc3125e7c6f41c1638a84b4e3dbfaf5d9a892",
              "hiddenLines": [
                [
                  71,
                  85
                ],
                [
                  92,
                  96
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面我们主要做出了如下几处修改："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "将 "
                        },
                        {
                          "text": "todoListData",
                          "code": true
                        },
                        {
                          "text": " 的每个元素的 "
                        },
                        {
                          "text": "user",
                          "code": true
                        },
                        {
                          "text": " 字段改为对应 "
                        },
                        {
                          "text": "userList",
                          "code": true
                        },
                        {
                          "text": " 元素的 "
                        },
                        {
                          "text": "id",
                          "code": true
                        },
                        {
                          "text": " ，方便基于 "
                        },
                        {
                          "text": "user",
                          "code": true
                        },
                        {
                          "text": " 的 "
                        },
                        {
                          "text": "id",
                          "code": true
                        },
                        {
                          "text": " 进行用户信息的查找。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们给 "
                        },
                        {
                          "text": "todoListData",
                          "code": true
                        },
                        {
                          "text": " 每个元素添加了 "
                        },
                        {
                          "text": "id",
                          "code": true
                        },
                        {
                          "text": " 方便标志，然后把 "
                        },
                        {
                          "text": "time",
                          "code": true
                        },
                        {
                          "text": " 属性替换成了 "
                        },
                        {
                          "text": "date",
                          "code": true
                        },
                        {
                          "text": " 属性。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们定义了一个 "
                        },
                        {
                          "text": "getUserById",
                          "code": true
                        },
                        {
                          "text": " 函数，用于每个 "
                        },
                        {
                          "text": "todo",
                          "code": true
                        },
                        {
                          "text": " 中根据 "
                        },
                        {
                          "text": "user",
                          "code": true
                        },
                        {
                          "text": " 字段来获取对应的用户详情，包括名字和头像等，这里我们有些同学可能有疑问了，我们给参数做了类型注解，为啥不需要注解返回值了？其实这也是 TS 自动类型推断的一个应用场景，TS 编译器会根据参数的类型然后自动计算返回值类型，所以我们就不需要明确的指定返回值啦。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们导出了 "
                        },
                        {
                          "text": "Todo",
                          "code": true
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "text": "User",
                          "code": true
                        },
                        {
                          "text": " 接口。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/TodoList.tsx",
          "display": true,
          "commit": "f24dc3125e7c6f41c1638a84b4e3dbfaf5d9a892",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着我们类似单独创建 "
                    },
                    {
                      "text": "src/TodoInput.tsx",
                      "code": true
                    },
                    {
                      "text": " 组件给 "
                    },
                    {
                      "text": "src/App.tsx",
                      "code": true
                    },
                    {
                      "text": " 减负一样，尝试创建 "
                    },
                    {
                      "text": "src/TodoList.tsx",
                      "code": true
                    },
                    {
                      "text": " 组件，然后把对应 "
                    },
                    {
                      "text": "src/App.tsx",
                      "code": true
                    },
                    {
                      "text": " 的对应逻辑移动到这个组件里："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/TodoList.tsx",
              "commit": "f24dc3125e7c6f41c1638a84b4e3dbfaf5d9a892",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面我们主要做了如下改动："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们首先导入了 "
                        },
                        {
                          "text": "Todo",
                          "code": true
                        },
                        {
                          "text": " 接口，给 TodoList 组件增加了 "
                        },
                        {
                          "text": "TodoListProps",
                          "code": true
                        },
                        {
                          "text": " 接口用于给这个组件的 "
                        },
                        {
                          "text": "props",
                          "code": true
                        },
                        {
                          "text": " 做类型注解。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们导入了和 "
                        },
                        {
                          "text": "getUserById",
                          "code": true
                        },
                        {
                          "text": " ，用于在 "
                        },
                        {
                          "text": "renderItem",
                          "code": true
                        },
                        {
                          "text": " 里面根据 "
                        },
                        {
                          "text": "item.user",
                          "code": true
                        },
                        {
                          "text": " 获取用户详情信息，然后展示头像和姓名。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们将 "
                        },
                        {
                          "text": "item.time",
                          "code": true
                        },
                        {
                          "text": " 更新为 "
                        },
                        {
                          "text": "item.date",
                          "code": true
                        },
                        {
                          "text": " "
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们根据待办事项是否已经完成设置了 "
                        },
                        {
                          "text": "line-through",
                          "code": true
                        },
                        {
                          "text": " 的 "
                        },
                        {
                          "text": "textDecoration",
                          "code": true
                        },
                        {
                          "text": " 属性，来标志已经完成的事项。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.tsx",
          "display": true,
          "commit": "f24dc3125e7c6f41c1638a84b4e3dbfaf5d9a892",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后我们来根据上面的改进来修改对应的 "
                    },
                    {
                      "text": "src/App.tsx",
                      "code": true
                    },
                    {
                      "text": " ："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.tsx",
              "commit": "f24dc3125e7c6f41c1638a84b4e3dbfaf5d9a892",
              "hiddenLines": [
                [
                  5,
                  8
                ],
                [
                  82,
                  96
                ],
                [
                  113,
                  117
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到上面的内容作出了如下的修改："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先我们删除了 "
                        },
                        {
                          "text": "TodoList",
                          "code": true
                        },
                        {
                          "text": " 部分代码，转而导入了 "
                        },
                        {
                          "text": "TodoList",
                          "code": true
                        },
                        {
                          "text": " 组件"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们使用 "
                        },
                        {
                          "text": "useState",
                          "code": true
                        },
                        {
                          "text": " Hooks 接收 "
                        },
                        {
                          "text": "todoListData",
                          "code": true
                        },
                        {
                          "text": " 作为默认数据，然后通过 "
                        },
                        {
                          "text": "isCompleted",
                          "code": true
                        },
                        {
                          "text": " 过滤，生成"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ],
              "id": "rxzjoiDXC"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们来总结和回顾一下这一小节学到的知识："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "首先我们讲解了 TS 中的函数，主要讲解了如何注解函数"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "然后引出了函数赋值给变量时如何进行变量的函数类型注解，并因此讲解了 TS 具有自动类型推断的能力"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "接着，我们对标接口（Interface）讲解了函数也存在可选参数"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "最后我们讲解了 TS 中独有的重载，它主要用来解决函数参数存在多种类型，然后对应参数的不同类型会有不同的返回值类型的情况，那么我们要给这种函数进行类型注解，可以通过重载的方式，解耦参数值类型和返回值类型，将所有可能情��通过重载表现出来。"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "因为本篇文章是图雀社区一杯茶系列，所以关于函数的知识，我们还有一些内容没有讲解到，不过具体内容都是触类旁通，比如注解函数的 "
                },
                {
                  "text": "rest",
                  "code": true
                },
                {
                  "text": " 参数，"
                },
                {
                  "text": "this",
                  "code": true
                },
                {
                  "text": " 等，有兴趣的同学可以查阅官方文档："
                },
                {
                  "text": "TS-函数",
                  "link": true,
                  "url": "https://www.typescriptlang.org/docs/handbook/functions.html"
                },
                {
                  "text": "。"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "2b7372ddc7003137e25d870d4b0513ab356c1ae2",
      "id": "sETI3SGhj",
      "articleId": "H2r1tpF_v",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "2b7372ddc7003137e25d870d4b0513ab356c1ae2",
          "id": "1T1H6ziAu",
          "fixed": true,
          "children": [
            {
              "text": "交叉类型、联合类型"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在前三个大章节中，我们我们讲解了基础的 TS 类型，然后接着我们用这些学到的基础类型，去组合形成枚举和接口，去注解函数的参数和返回值，这都是 TS 类型注解到 JS 元素上的实践，那么就像 JS 中有元素运算一样如加减乘除甚至集合运算 “交并补”，TS 中也存在类型的一个运算，这就是我们这一节中要讲解的交叉和联合类型。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "交叉类型"
                }
              ],
              "id": "pPi2CLZ2j"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "交叉类型就是多个类型，通过 "
                },
                {
                  "text": "&",
                  "code": true
                },
                {
                  "text": " 类型运算符，合并成一个类型，这个类型包含了多个类型中的所有类型成员，我们来看个响应体的例子，假如我们有一个查询艺术家的请求，我们要根据查询的结果 -- 响应体，打印对应信息，一般响应体是两类信息的综合："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "请求成功，返回标志请求成功的状态，以及目标数据"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "请求失败，返回标志请求失败的状态，以及错误信息"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "针对这一一个场景，我们就可以使用交叉类型，了解了这样一个场景之后，那么我们再来看一下对应这个场景的具体例子："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "interface ErrorHandling {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  success: boolean;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  error?: { message: string };"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "interface ArtistsData {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  artists: { name: string }[];"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const handleArtistsResponse = (response: ArtistsData & ErrorHandling) => {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  if (response.error) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    console.error(response.error.message);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  console.log(response.artists);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "};"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们可以看到这个例子，我们的艺术家信息接口（Interface）是 "
                },
                {
                  "text": "ArtistsData",
                  "code": true
                },
                {
                  "text": " ，它是请求成功之后返回的具体数据之一，除了这个，我们的响应体一般还有标志响应是否成功的状态，以及错误的时候的打印信息，所以我们还定义了一个 "
                },
                {
                  "text": "ErrorHandling",
                  "code": true
                },
                {
                  "text": " ，它们两个进行一个交叉类型操作就组成了我们的艺术家响应体："
                },
                {
                  "text": "ArtistsData & ErrorHandling",
                  "code": true
                },
                {
                  "text": " ，然后我们在函数参数里面标志 "
                },
                {
                  "text": "response",
                  "code": true
                },
                {
                  "text": " 为这个交叉类型的结果，并在函数体之类根据请求是否成功的状态 "
                },
                {
                  "text": "reponse.error",
                  "code": true
                },
                {
                  "text": " 判断来打印对应的信息。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "联合类型"
                }
              ],
              "id": "NZSVpDpwR"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "那么联合类型是什么了？联合类型实际上是通过操作符 "
                },
                {
                  "text": "|",
                  "code": true
                },
                {
                  "text": " ，将多个类型进行联合，组成一个复合类型，当用这个复合类型注解一个变量的时候，这个变量可以取这个复合类型中的任意一个类型，这个有点类似枚举了，就是一个变量可能存在多个类型，但是最终只能取一个类型。"
                }
              ]
            },
            {
              "type": "block-quote",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "读者这里可以自行了解联合类型和枚举类型的一个细节差异，本文首先于篇幅，不具体展开。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "接下来我们来看个联合类型应用的场景，比如我们有一个 "
                },
                {
                  "text": "padLeft",
                  "code": true
                },
                {
                  "text": " 函数 -- 左填充空格操作，它负责接收两个参数 "
                },
                {
                  "text": "value",
                  "code": true
                },
                {
                  "text": " 和 "
                },
                {
                  "text": "padding",
                  "code": true
                },
                {
                  "text": " ，主要目标是实现给 "
                },
                {
                  "text": "value",
                  "code": true
                },
                {
                  "text": " 这个字符串左边添加 "
                },
                {
                  "text": "padding",
                  "code": true
                },
                {
                  "text": " ，可以类比这个 "
                },
                {
                  "text": "padding",
                  "code": true
                },
                {
                  "text": " 就是空格，但是这里的 "
                },
                {
                  "text": "padding",
                  "code": true
                },
                {
                  "text": " 既可以是字符串 "
                },
                {
                  "text": "string",
                  "code": true
                },
                {
                  "text": " 类型，也可以是数字 "
                },
                {
                  "text": "number",
                  "code": true
                },
                {
                  "text": " ，当 "
                },
                {
                  "text": "padding",
                  "code": true
                },
                {
                  "text": " 是字符串时，一个比较简单的例子如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const value: string = 'Hello Tuture';"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const padding: string = '   ';"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "padLeft(value, padding) // => '   Hello Tuture';"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "好的，了解的场景之后，我们马上来一个实战，讲解上面那个例子的一个升级版："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function padLeft(value: string, padding: any) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  if (typeof padding === \"number\") {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return Array(padding + 1).join(\" \") + value;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  if (typeof padding === \"string\") {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return padding + value;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  throw new Error(`Expected string or number, got '${padding}'.`);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "padLeft(\"Hello world\", 4);"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到这个例子，"
                },
                {
                  "text": "padding",
                  "code": true
                },
                {
                  "text": " 我们暂时给了 "
                },
                {
                  "text": "any",
                  "code": true
                },
                {
                  "text": " ，然后函数体里面对 "
                },
                {
                  "text": "string",
                  "code": true
                },
                {
                  "text": " 和 "
                },
                {
                  "text": "number",
                  "code": true
                },
                {
                  "text": " 类型给了判断，执行对应的 “左空格填充” 操作，这个逻辑对于研发初期是可行的，但是当我们涉及到多人协作开发的时候，其他成员光看这个函数的变量定义，无法了解到底该给这个 "
                },
                {
                  "text": "padding",
                  "code": true
                },
                {
                  "text": " 传递一个什么样类型的值，有可能某个队友进行了如下操作："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "padLeft('Hello world', true)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "啪的一下，这个程序就崩了！所以你看，其实程序还是很脆弱的。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "为了更加明确的约束 "
                },
                {
                  "text": "padding",
                  "code": true
                },
                {
                  "text": " 的类型，我们有必要引进联合类型："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function padLeft(value: string, padding: string | number) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  // ...中间一样"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这个时候，我们发现即使再来很多位队友，他们也知道该如何调用这个接口，因为编译器会强制队友写正确的类型，如果还继续写："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "padLeft('Hello world', true)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "编译器就会提示你如下错误："
                }
              ]
            },
            {
              "type": "image",
              "url": "https://imgkr.cn-bj.ufileos.com/dff2724f-8535-491c-a146-d7fab26aa4f5.png",
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ],
              "id": "ACGRZPUC0"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这一小节中我们学习了交叉类型和联合类型，它们是 TS 类型系统中的类型运算的产物，交叉类型是多个类型组成一个类型，最终结果类型是多个类型的总和，而联合类型是多个类型组成一个综合体，最终的结果类型是多个类型之中的某一个类型，交叉类型主要用于构造响应体，联合类型主要用于处理单变量被注解为多类型之一的场景，它还会与我们下一节要讲的字面量类型发生化学反应，实现枚举和处理类型守卫，我们将马上来讲解这些神奇的化学反应。"
                }
              ]
            },
            {
              "type": "heading-two",
              "children": [
                {
                  "text": "字面量类型与类型守卫"
                }
              ],
              "id": "9lVWigs6Z"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "最后我们来聊一聊类型守卫，类型守卫很多场景上都是和联合类型打配合存在的。在讲类型守卫的时候，我们还需要先聊一聊字面量类型，额！其实这三者是相辅相成的。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "字面量类型"
                }
              ],
              "id": "SClpefbLC"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "其实字面量类型我们在第二节中已经或多或少的提到过了，还记得那个报错嘛？"
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const tutureSlogan: string = 5201314 // 报错 Type '5201314' is not assignable to Type 'string'"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这里的 TS 编译器提示，\"Type '5201314' is not assignable to Type  'string“，这里的 \"Type  '5201314'\" 实际上就是一个字面量类型。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "字面量可是说是 TS 类型系统里面最小的类型，就像 JS 里面的数字 1，它不可能再拆成更小的部分了，一般字面量类型分为两种："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "数字字面量"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "字符串字面量"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "数字字面量"
                }
              ],
              "id": "jkN8SUEAz"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "像 "
                },
                {
                  "text": "520",
                  "code": true
                },
                {
                  "text": " 这个数，把它当做类型使用，它就是数组字面量类型，使用它来注解一个变量的时候是这样的："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "let tuture: 520"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "当我们初始化这个 tuture 变量的时候，就只能是赋值 520 这个数字了："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "typescript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "tuture = 520; // 正确"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "tuture = 521; // 错误 Type '521' is not assignable to type '520'"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "字符串字面量"
                }
              ],
              "id": "HEHqRMo32"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "对应的字符串字面量类似，我们现在用 "
                },
                {
                  "text": "'520'",
                  "code": true
                },
                {
                  "text": " 这个字符串字面量类型来注解 "
                },
                {
                  "text": "tuture",
                  "code": true
                },
                {
                  "text": " ："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "let tuture: '520';"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "tuture = '520';"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "tuture = '521'; // Type '\"521\"' is not assignable to type '\"520\"'"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到字面量类型还带来一个特点就是，被注解的为对应字面量类型的变量，在赋值的时候只能赋值为这个被注解的字面量。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "上面我们了解了字面量类型，并且具体谈了谈它们的特点，那么这么一个单纯的类型，到底有什么特别的地方了？其实字面量类型搭配联合类型有意想不到的威力，我们来举两个例子："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "实现枚举"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "实现类型守卫"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "搭配举例 - 实现枚举效果"
                }
              ],
              "id": "hbJdTTiFw"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "当我们搭配联合类型和字面量类型的时候，我们可以实现一定的枚举效果，我们来看个例子，我们买电脑一般都是三种系统，我们可以通过选用这三种电脑类型来获取对应的一个用户的情况，我们现在只给出一个函数的大体框架，具体实现在类型守卫里面详细展开："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function getUserInfo(osType: 'Linux' | 'Mac' | 'Windows') { // ... 后续实现 }"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们可以看到上面的例子，"
                },
                {
                  "text": "osType",
                  "code": true
                },
                {
                  "text": " 可以取三种操作系统之一的值，这就类似枚举，我们可以创建一个类似的枚举："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "enum EnumOSType {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  Linux,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  Mac,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  Windows"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function getUserInfo(osType: EnumOSType) {}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "上面两个例子效果其实差不多，我们就通过 联合类型+字面量类型 实现了一个简单枚举的效果。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "类型守卫"
                }
              ],
              "id": "ZlgAJgdm7"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "类型守卫是我们 联合类型+字面量类型 的又一个应用场景，它主要用于在进行 ”联合“ 的多个类型之间，存在相同的字段，也存在不同的字段，然后需要区分具体什么时候是使用哪个类型，这么说可能比较迷糊，我们来看个例子，加入我们的 "
                },
                {
                  "text": "getUserInfo",
                  "code": true
                },
                {
                  "text": " 函数的参数接收的是 "
                },
                {
                  "text": "os",
                  "code": true
                },
                {
                  "text": " ，它根据 "
                },
                {
                  "text": "os.type",
                  "code": true
                },
                {
                  "text": " 打印对应 "
                },
                {
                  "text": "os",
                  "code": true
                },
                {
                  "text": " 携带的用户信息："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "interface Linux {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  type: 'Linux';"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  linuxUserInfo: '极客';"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "interface Mac {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  type: 'Mac';"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  macUserInfo: '极客+1';"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "interface Windows {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  type: 'Windows';"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  windowsUserInfo: '极客+2';"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function getUserInfo(os: Linux | Mac | Windows) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  console.log(os.linuxUserInfo);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到上面我们将 "
                },
                {
                  "text": "osType",
                  "code": true
                },
                {
                  "text": " 扩充成了 "
                },
                {
                  "text": "os",
                  "code": true
                },
                {
                  "text": " ，然后三种 os 有相同的字段 "
                },
                {
                  "text": "type",
                  "code": true
                },
                {
                  "text": " 和不同的字段 "
                },
                {
                  "text": "xxxUserInfo",
                  "code": true
                },
                {
                  "text": " ，但是当我们函数体类打印 "
                },
                {
                  "text": "os.linuxUserInfo",
                  "code": true
                },
                {
                  "text": " 的时候，TS 编译器报了如下错误："
                }
              ]
            },
            {
              "type": "image",
              "url": "https://imgkr.cn-bj.ufileos.com/ea108ffe-18b2-4a94-99ab-b72114bb8ef3.png",
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "有同学就有疑问了，我们这里不是联合类型了嘛，那应该 "
                },
                {
                  "text": "os",
                  "code": true
                },
                {
                  "text": " 有 "
                },
                {
                  "text": "Linux",
                  "code": true
                },
                {
                  "text": " 这一类型啊，这么打印为什么会错呢？其实我们要抓住一点，联合类型的最终结果是联合的多个类型之一，也就是 "
                },
                {
                  "text": "os",
                  "code": true
                },
                {
                  "text": " 还可能是 "
                },
                {
                  "text": "Mac",
                  "code": true
                },
                {
                  "text": " 或者 "
                },
                {
                  "text": "Windows",
                  "code": true
                },
                {
                  "text": " ，所以这里打印 "
                },
                {
                  "text": "os.linuxUserInfo",
                  "code": true
                },
                {
                  "text": " 就有问题，所以我们这个时候就需要类型守卫来帮忙了，它主要是根据多个类型中一样的字段，且这个字段是字面量类型来判断，进而执行不同的逻辑来确保类型的执行是正确的，我们来延伸一下上面的那个例子："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function getUserInfo(os: Linux | Mac | Windows) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  switch (os.type) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    case 'Linux': {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      console.log(os.linuxUserInfo);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      break;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    case 'Mac': {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      console.log(os.macUserInfo);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      break;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    case 'Windows': {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      console.log(os.windowsUserInfo);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      break;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，如果有同学跟着手敲这个函数的话，会发现当针对 "
                },
                {
                  "text": "os.type",
                  "code": true
                },
                {
                  "text": " 进行条件判断之后，在 "
                },
                {
                  "text": "case",
                  "code": true
                },
                {
                  "text": " 语句里面，TS 自动提示了需要取值的类型，比如在 "
                },
                {
                  "text": "Linux",
                  "code": true
                },
                {
                  "text": "  case 语句里面输入 "
                },
                {
                  "text": "os.",
                  "code": true
                },
                {
                  "text": " 会提示 "
                },
                {
                  "text": "linux",
                  "code": true
                },
                {
                  "text": " ："
                }
              ]
            },
            {
              "type": "image",
              "url": "https://imgkr.cn-bj.ufileos.com/d2dd5112-29b4-4f01-aa09-c3665c41f974.png",
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "动手实践"
                }
              ],
              "id": "k5oBktfOP"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "了解完字面量类型和类型守卫之后，我们马上运用在我们的待办事项应用里面。"
                }
              ]
            }
          ]
        },
        {
          "file": "src/TodoList.tsx",
          "display": true,
          "commit": "2b7372ddc7003137e25d870d4b0513ab356c1ae2",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先打开 "
                    },
                    {
                      "text": "src/TodoList.tsx",
                      "code": true
                    },
                    {
                      "text": " ，我们近一步完善 "
                    },
                    {
                      "text": "TodoList.tsx",
                      "code": true
                    },
                    {
                      "text": " 的逻辑："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/TodoList.tsx",
              "commit": "2b7372ddc7003137e25d870d4b0513ab356c1ae2",
              "hiddenLines": [
                [
                  49,
                  54
                ],
                [
                  72,
                  94
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到上面的改动主要有如下几个部分："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们扩展了单个 Todo 的点击下拉菜单的菜单组件，定义了一个 "
                        },
                        {
                          "text": "Action",
                          "code": true
                        },
                        {
                          "text": " 组件，它接收两个参数，"
                        },
                        {
                          "text": "isCompleted",
                          "code": true
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "text": "onClick",
                          "code": true
                        },
                        {
                          "text": " ，前者用来标志现在对 Todo 操作是重做还是完成，后者用来处理点击事件，根据 "
                        },
                        {
                          "text": "todo.id",
                          "code": true
                        },
                        {
                          "text": " 和 操作的类型 "
                        },
                        {
                          "text": "key",
                          "code": true
                        },
                        {
                          "text": " 来处理。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们在 "
                        },
                        {
                          "text": "Action",
                          "code": true
                        },
                        {
                          "text": " 组件的 "
                        },
                        {
                          "text": "onClick",
                          "code": true
                        },
                        {
                          "text": " 属性里面调用的 "
                        },
                        {
                          "text": "onClick",
                          "code": true
                        },
                        {
                          "text": " 函数是父组件传下来的函数，所以我们需要额外在 "
                        },
                        {
                          "text": "TodoListProps",
                          "code": true
                        },
                        {
                          "text": " 加上这个 "
                        },
                        {
                          "text": "onClick",
                          "code": true
                        },
                        {
                          "text": " 函数的类型定义，按照我们之前学习的注解函数的知识，这里我们需要注解参数列表和返回值，因为 "
                        },
                        {
                          "text": "onClick",
                          "code": true
                        },
                        {
                          "text": " 函数内部执行点击逻辑，不需要返回值，所以我们给它注解了 "
                        },
                        {
                          "text": "void",
                          "code": true
                        },
                        {
                          "text": " 类型，针对参数列表，"
                        },
                        {
                          "text": "todoId",
                          "code": true
                        },
                        {
                          "text": " 比较简单，一般是字符串，所以注解为 "
                        },
                        {
                          "text": "string",
                          "code": true
                        },
                        {
                          "text": " 类型，而 "
                        },
                        {
                          "text": "key",
                          "code": true
                        },
                        {
                          "text": " 标注操作的类型，它是一个字面量联合类型，允许有 "
                        },
                        {
                          "text": "complete",
                          "code": true
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "text": "delete",
                          "code": true
                        },
                        {
                          "text": " 两种"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们来看 Action 组件，我们在上一步已经讲解它接收两个参数，因此我们新增一个 "
                        },
                        {
                          "text": "ActionProps",
                          "code": true
                        },
                        {
                          "text": " 来注解 Action 组件的参数列表，可以看到其中的 "
                        },
                        {
                          "text": "onClick",
                          "code": true
                        },
                        {
                          "text": " 和我们上一步讲解的一样，"
                        },
                        {
                          "text": "isCompleted",
                          "code": true
                        },
                        {
                          "text": " 注解为 "
                        },
                        {
                          "text": "boolean",
                          "code": true
                        },
                        {
                          "text": " 。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接在在 Action 组件里我们定义了 Menu  "
                        },
                        {
                          "text": "onClick",
                          "code": true
                        },
                        {
                          "text": "的处理函数 "
                        },
                        {
                          "text": "handleActionClick ",
                          "code": true
                        },
                        {
                          "text": " 是一个"
                        },
                        {
                          "text": "ClickParam",
                          "code": true
                        },
                        {
                          "text": " 类型，它是从 "
                        },
                        {
                          "text": "antd/lib/menu",
                          "code": true
                        },
                        {
                          "text": " 导入的 ，由组件库提供的，然后我们从参数里面解构出来了 "
                        },
                        {
                          "text": "key",
                          "code": true
                        },
                        {
                          "text": " ，进而通过字面量类型进行类型守卫，处理了对于的 "
                        },
                        {
                          "text": "onClick",
                          "code": true
                        },
                        {
                          "text": " 逻辑"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们做的一点改进就是在 Menu 里面根据 "
                        },
                        {
                          "text": "isCompleted",
                          "code": true
                        },
                        {
                          "text": " 展示 “重做” 还是 “完成”。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.tsx",
          "display": true,
          "commit": "2b7372ddc7003137e25d870d4b0513ab356c1ae2",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "改进了 "
                    },
                    {
                      "text": "src/TodoList.tsx",
                      "code": true
                    },
                    {
                      "text": " ，接着我们再来改进 "
                    },
                    {
                      "text": "src/App.tsx",
                      "code": true
                    },
                    {
                      "text": " 里面对应于 "
                    },
                    {
                      "text": "TodoList",
                      "code": true
                    },
                    {
                      "text": " 的逻辑，我们打开 "
                    },
                    {
                      "text": "src/App.tsx",
                      "code": true
                    },
                    {
                      "text": " 对其中的内容做出对应的修改如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.tsx",
              "commit": "2b7372ddc7003137e25d870d4b0513ab356c1ae2",
              "hiddenLines": [
                [
                  4,
                  22
                ],
                [
                  27,
                  33
                ],
                [
                  57,
                  71
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到上面主要就是两处改动："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "给 "
                        },
                        {
                          "text": "TodoList",
                          "code": true
                        },
                        {
                          "text": " 增加 "
                        },
                        {
                          "text": "onClick",
                          "code": true
                        },
                        {
                          "text": " 属性"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "实现 "
                        },
                        {
                          "text": "onClick",
                          "code": true
                        },
                        {
                          "text": " 函数，根据字面量类型 "
                        },
                        {
                          "text": "key",
                          "code": true
                        },
                        {
                          "text": " 进行类型守卫处理对应的数据更改逻辑"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ],
              "id": "mIt1RbUMa"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在这个小结中我们学习了字面量类型和类型守卫，字面量类型与联合类型搭配可以实现枚举的效果，也可以处理类型守卫，字面量类型是 TS 中最原子的类型，它不可以再进行拆解，而类型守卫主要是在针对联合类型时，TS 编译器无法处理，需要通过开发者手工辅助 TS 编译器处理类型而存在。"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "3c6721eba0d387c5e55a758232a963a98524b0b4",
      "id": "L61QtcW-f",
      "articleId": "H2ybXYu3c",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "3c6721eba0d387c5e55a758232a963a98524b0b4",
          "id": "F8dUZok1D",
          "fixed": true,
          "children": [
            {
              "text": "类型别名"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "就像我们为了在平时开发中更加灵活而创建变量或者干掉硬编码数据一样，TS 为我们提供了类型别名，它允许你为类型创建一个名字，这个名字就是类型的别名，进而你可以在多处使用这个别名，并且有必要的时候，你可以更改别名的值（类型），以达到一次替换，多处应用的效果。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们来看一个简单的类型别名的例子，假如我们有一个获取一个人姓名的函数，它接收一个参数，这个参数有可能直接是要获取的姓名，它是一个 "
                },
                {
                  "text": "string",
                  "code": true
                },
                {
                  "text": " 类型，也有可能是一个另外一个函数，需要调用它以获取姓名，它是一个函数类型，我们来看一下这个例子："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function getName(n) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  if (typeof n === 'string') {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return n;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  } else {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return n();"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如果我们要给这个 "
                },
                {
                  "text": "n",
                  "code": true
                },
                {
                  "text": " 进行类型注解，那么它应该同时是 "
                },
                {
                  "text": "string | () => string",
                  "code": true
                },
                {
                  "text": " ，是 "
                },
                {
                  "text": "string",
                  "code": true
                },
                {
                  "text": " 类型和 "
                },
                {
                  "text": "() => string",
                  "code": true
                },
                {
                  "text": " 函数类型的联合类型，有过一定开发经验的同学可能会发觉，这样写可能很影响原代码的可读性，而且这个 "
                },
                {
                  "text": "n",
                  "code": true
                },
                {
                  "text": " 的类型可能会变化，因为我们的函数可能扩展，所以如果我们用一个类型别名把这个 "
                },
                {
                  "text": "n",
                  "code": true
                },
                {
                  "text": " 的类型表示出来，那么就类似我们用变量替代了硬编码，可扩展性就更强了，我们马上来尝试一下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "type NameParams = 'string' | () => 'string';"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function getName(n: NameParams): string {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  // ... 其它一样"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到我们用了一个 "
                },
                {
                  "text": "NameParams",
                  "code": true
                },
                {
                  "text": " 类型别名，它保存着原联合类型，类型别名就是等号左边是 "
                },
                {
                  "text": "type",
                  "code": true
                },
                {
                  "text": " 关键字加上别名变量，等号右边是带保存的类型，这个类型很广，它可以是字面量类型，基础类型，元组、函数、联合类型和交叉类型、甚至还可以是其他类型别名的组合。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "所以对于上面的 "
                },
                {
                  "text": "NameParams",
                  "code": true
                },
                {
                  "text": " ，我们可以进一步拆解它为如下的样子："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "type Name = string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "type NameResolver = () => string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "type NameParams = Name | NameResolver;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function getName(n: NameParams): Name {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  // ... 其他一样"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们看到，上面这个不仅更加细粒度，我们将 "
                },
                {
                  "text": "NameParams",
                  "code": true
                },
                {
                  "text": " 拆成了两个类型别名："
                },
                {
                  "text": "Name",
                  "code": true
                },
                {
                  "text": " 和 "
                },
                {
                  "text": "NameResolver",
                  "code": true
                },
                {
                  "text": " ，分别处理 "
                },
                {
                  "text": "string",
                  "code": true
                },
                {
                  "text": " 和 "
                },
                {
                  "text": "() => string",
                  "code": true
                },
                {
                  "text": " 的情况，然后通过联合操作符联合赋值给 "
                },
                {
                  "text": "NameParams",
                  "code": true
                },
                {
                  "text": " ；还带来了一个优势，我们的返回值可以更加明确就是 "
                },
                {
                  "text": "Name",
                  "code": true
                },
                {
                  "text": " 类型，这样 "
                },
                {
                  "text": "Name",
                  "code": true
                },
                {
                  "text": " 变化，它可能变成 "
                },
                {
                  "text": "number",
                  "code": true
                },
                {
                  "text": " 类型，那么也能很好的反应这个变化，且只需要修改一下 "
                },
                {
                  "text": "Name",
                  "code": true
                },
                {
                  "text": " 的值为 "
                },
                {
                  "text": "number",
                  "code": true
                },
                {
                  "text": " 类型就可以了，所有其他的 "
                },
                {
                  "text": "Name",
                  "code": true
                },
                {
                  "text": "  类型会自动变化。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "类型别名与接口"
                }
              ],
              "id": "MW4nIv8SV"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "有同学读到这里，可能有疑问了，这个类型别名貌似无所不能嘛，那它和接口有什么区别了？"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "接口主要是用来定义一个结构的类型，比如定义一个对象的类型，而类型别名可以是任意细粒度的类型定义，比如我们前面讲的最原子的字母量类型如 "
                },
                {
                  "text": "'hello tuture'",
                  "code": true
                },
                {
                  "text": " 类型，到对象类型如："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "type tuture = {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  tutureCommunity: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  editure: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  tutureDocs: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "上面这个类型我们定义了一个包含三个属性的对象类型，并用 "
                },
                {
                  "text": "tuture",
                  "code": true
                },
                {
                  "text": " 别名来存储它们。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "定义上面这个对象的类型我们可以用之前学到的接口这样写："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "interface Tuture {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  tutureCommunity: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  editure: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  tutureDocs: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到类型别名既可以表达接口所表达的类型，还比接口更加细粒度，它还可以是一个基础类型如 "
                },
                {
                  "text": "type name = 'string'",
                  "code": true
                },
                {
                  "text": " 。"
                }
              ]
            }
          ]
        },
        {
          "file": "src/TodoList.tsx",
          "display": true,
          "commit": "3c6721eba0d387c5e55a758232a963a98524b0b4",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "动手实践"
                    }
                  ],
                  "id": "Fo_6kON5h"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "还记得之前我们那个 "
                    },
                    {
                      "text": "src/TodoList.tsx",
                      "code": true
                    },
                    {
                      "text": " 中 "
                    },
                    {
                      "text": "Action",
                      "code": true
                    },
                    {
                      "text": " 组件的 "
                    },
                    {
                      "text": "onClick",
                      "code": true
                    },
                    {
                      "text": " 方法的参数 "
                    },
                    {
                      "text": "key",
                      "code": true
                    },
                    {
                      "text": " 嘛？它是一个联合类型类型 "
                    },
                    {
                      "text": "\"complete | delete\"",
                      "code": true
                    },
                    {
                      "text": " ，我们在多出处用到它，现在我们是硬编码写在了程序里，未来这个 "
                    },
                    {
                      "text": "key",
                      "code": true
                    },
                    {
                      "text": " 可能会变化，所以我们需要换成类型别名来表达它们，打开 "
                    },
                    {
                      "text": "src/TodoList.tsx",
                      "code": true
                    },
                    {
                      "text": " ，对其中的内容作出对应的修改如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/TodoList.tsx",
              "commit": "3c6721eba0d387c5e55a758232a963a98524b0b4",
              "hiddenLines": [
                [
                  18,
                  33
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们定义了一个 "
                    },
                    {
                      "text": "MenuKey",
                      "code": true
                    },
                    {
                      "text": " 类型别名，它表示原联合类型 "
                    },
                    {
                      "text": "complete | delete",
                      "code": true
                    },
                    {
                      "text": " ，然后我们替换了组件中三处使用到这个联合类型的 "
                    },
                    {
                      "text": "onClick",
                      "code": true
                    },
                    {
                      "text": " 函数的参数 "
                    },
                    {
                      "text": "key",
                      "code": true
                    },
                    {
                      "text": " ，将其用 "
                    },
                    {
                      "text": "MenuKey",
                      "code": true
                    },
                    {
                      "text": " 来注解。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "其次我们还删除了 "
                    },
                    {
                      "text": "antd",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "@ant-design/icons",
                      "code": true
                    },
                    {
                      "text": " 里面的多余导出。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "ff925f8d8e6f44d9051c22ed7c54e9727d015c15",
      "id": "ar7R_mZZg",
      "articleId": "H2ybXYu3c",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "ff925f8d8e6f44d9051c22ed7c54e9727d015c15",
          "id": "bnH3gOQTz",
          "fixed": true,
          "children": [
            {
              "text": "继续改进"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        },
        {
          "file": "src/TodoList.tsx",
          "display": true,
          "commit": "ff925f8d8e6f44d9051c22ed7c54e9727d015c15",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着我们再来对 "
                    },
                    {
                      "text": "TodoList",
                      "code": true
                    },
                    {
                      "text": " 做一点改变，导出一下我们刚刚定义的 "
                    },
                    {
                      "text": "MenuKey",
                      "code": true
                    },
                    {
                      "text": " ，因为还有其他的地方使用到它，我们打开 "
                    },
                    {
                      "text": "src/TodoList.tsx",
                      "code": true
                    },
                    {
                      "text": " 给 "
                    },
                    {
                      "text": "MenuKey",
                      "code": true
                    },
                    {
                      "text": " 添加 "
                    },
                    {
                      "text": "export",
                      "code": true
                    },
                    {
                      "text": " 前缀，导出我们的类型别名："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/TodoList.tsx",
              "commit": "ff925f8d8e6f44d9051c22ed7c54e9727d015c15",
              "hiddenLines": [
                [
                  0,
                  3
                ],
                [
                  14,
                  83
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.tsx",
          "display": true,
          "commit": "ff925f8d8e6f44d9051c22ed7c54e9727d015c15",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着我们在 "
                    },
                    {
                      "text": "src/App.tsx",
                      "code": true
                    },
                    {
                      "text": " 里面导入我们的 "
                    },
                    {
                      "text": "MenuKey",
                      "code": true
                    },
                    {
                      "text": " 类型别名，并替换对应的 "
                    },
                    {
                      "text": "onClick",
                      "code": true
                    },
                    {
                      "text": " 的参数 "
                    },
                    {
                      "text": "key",
                      "code": true
                    },
                    {
                      "text": " 的类型注解为 "
                    },
                    {
                      "text": "MenuKey",
                      "code": true
                    },
                    {
                      "text": " ："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.tsx",
              "commit": "ff925f8d8e6f44d9051c22ed7c54e9727d015c15",
              "hiddenLines": [
                [
                  21,
                  24
                ],
                [
                  28,
                  35
                ],
                [
                  56,
                  56
                ],
                [
                  59,
                  87
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到如上文件里面，我们还删除了一些 "
                    },
                    {
                      "text": "antd",
                      "code": true
                    },
                    {
                      "text": " 里面不必要的包导入。"
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "小结"
                    }
                  ],
                  "id": "3POCk0bPo"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这一节我们学习了类型别名，它可以在一定程度上模拟接口（Interface），同时在类型上又可以达到比接口更加细粒度的效果，同时它又像 JS 中的变量，可以一处修改，多处生效，避免硬编码类型带来的一些代码上的重构和改动难题。"
                    }
                  ]
                },
                {
                  "type": "heading-two",
                  "children": [
                    {
                      "text": "类"
                    }
                  ],
                  "id": "hdbnYURqf"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在进行类的类型注解之前，我们首先先来了解一下类的组成："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "构造函数"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "属性"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "实例属性"
                        }
                      ],
                      "level": 1,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "静态属性"
                        }
                      ],
                      "level": 1,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "方法"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "实例方法"
                        }
                      ],
                      "level": 1,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "静态方法"
                        }
                      ],
                      "level": 1,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这是 ES6 里面类的一个组成，那么在 TS 里面我们该如何注解这些内容了？主要有如下组成："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "注解构造函数"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "注解属性："
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "访问限定符： "
                        },
                        {
                          "text": "public/protected/private ",
                          "code": true
                        },
                        {
                          "text": " "
                        }
                      ],
                      "level": 1,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "修饰符："
                        },
                        {
                          "text": "readonly",
                          "code": true
                        },
                        {
                          "text": " "
                        }
                      ],
                      "level": 1,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "注解方法"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "访问限定符："
                        },
                        {
                          "text": "public/protected/private",
                          "code": true
                        },
                        {
                          "text": " "
                        }
                      ],
                      "level": 1,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "简单注解"
                    }
                  ],
                  "id": "UAQObAHUy"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "了解了类大致需要进行类型注解的部分，我们来具体体验一下这个注解过程。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先我们来看一个动物类："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "js",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "class Animal {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  name;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  static isAnimal(a) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    return a instanceof Animal;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  "
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  constructor(name) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    this.name = name;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  move(distance) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    console.log(`Animal moved ${distance}m.`);"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们可以看到上面这个类的四个部分："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "实例属性 "
                        },
                        {
                          "text": "name",
                          "code": true
                        },
                        {
                          "text": " ，\b它一般是 "
                        },
                        {
                          "text": "string",
                          "code": true
                        },
                        {
                          "text": " 类型，静态属性注解同实例属性类似"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "静态方法 "
                        },
                        {
                          "text": "isAnimal",
                          "code": true
                        },
                        {
                          "text": " ，按照之前讲解的注解的函数方式进行注解：1）注解参数 2）注解返回值"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "构造函数，注解参数"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "普通方法，按照之前讲解的注解的函数方式进行注解：1）注解参数 2）注解返回值"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "了解之后，我们来注解一下上面这个类："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "class Animal {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  name: string;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  static isAnimal(a: Animal): boolean {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    return a instanceof Animal;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  constructor(name: string) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    this.name = name;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  move(distance: number) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    console.log(`Animal moved ${distance}m.`);"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，经过注解后的类看起来也很熟悉，因为都是之前学过的，这里有个唯一的不同就是我们的静态方法 "
                    },
                    {
                      "text": "isAnimal",
                      "code": true
                    },
                    {
                      "text": " ，它接收的参数 "
                    },
                    {
                      "text": "a",
                      "code": true
                    },
                    {
                      "text": "  是 "
                    },
                    {
                      "text": "Animal",
                      "code": true
                    },
                    {
                      "text": " 类本身来注解的，这里就涉及到两个知识："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "类可以拿来进行类型注解"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "类的实例都可以用类名来注解"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这两个知识我们将在后面讲解构造函数时详细讲解。"
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "访问限定符"
                    }
                  ],
                  "id": "Tpq-RS4Ic"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "除了简单注解，TS 还给类赋予了一些独特的内容，其中一个就是大多数静态语言都有的访问限定符："
                    },
                    {
                      "text": "public",
                      "code": true
                    },
                    {
                      "text": " 、"
                    },
                    {
                      "text": "protected",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "private",
                      "code": true
                    },
                    {
                      "text": " ，这些内容读者可能看起来很陌生了，我们接下来就来仔细讲一讲。"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "Public"
                    }
                  ],
                  "id": "myloK7Eaq"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "public",
                      "code": true
                    },
                    {
                      "text": " 代表公共的，表示被此访问限定符修饰的属性，方法可以任何地方访问到：1）类中 2）类的实例对象 3）类的子类中 4）子类的实例对象 等，默认所有类的属性和方法都是 "
                    },
                    {
                      "text": "public",
                      "code": true
                    },
                    {
                      "text": " 修饰的，比如我们拿上面那个 "
                    },
                    {
                      "text": "Animal",
                      "code": true
                    },
                    {
                      "text": " 类来举例："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "class Animal {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  public name: string;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  // ..."
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  public constructor(name: string) { // 函数体 }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  // ..."
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "} "
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到其实我们的 "
                    },
                    {
                      "text": "name",
                      "code": true
                    },
                    {
                      "text": " 属性和构造函数等，他们默认都是 "
                    },
                    {
                      "text": "public",
                      "code": true
                    },
                    {
                      "text": " 访问限定符，这样我们可以在任何地方访问到这些属性，下面我们就来看看如何访问这些属性。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在类内部访问：",
                      "bold": true
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "class Animal {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  public name: string; ",
                          "bold": true
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "",
                          "bold": true
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  public constructor(name: string) { // 函数体 }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  move(distance: number) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    console.log(`${this.name} moved ${distance}m.`);"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}",
                          "bold": true
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "",
                          "bold": true
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const bird = new Animal('Tuture');"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "bird.move(520); // 打印 `Tuture moved 520m.`"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们在类内部的 "
                    },
                    {
                      "text": "move",
                      "code": true
                    },
                    {
                      "text": " 方法内访问了 public 类型的 "
                    },
                    {
                      "text": "name",
                      "code": true
                    },
                    {
                      "text": " 属性。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在类外部访问：",
                      "bold": true
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const animal = new Animal('bird');"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "console.log(animal.name) // 打印 bird"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面我们通过类 "
                    },
                    {
                      "text": "Animal",
                      "code": true
                    },
                    {
                      "text": " 的实例 "
                    },
                    {
                      "text": "animal",
                      "code": true
                    },
                    {
                      "text": " 访问到了 "
                    },
                    {
                      "text": "name",
                      "code": true
                    },
                    {
                      "text": " 属性。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在子类中访问：",
                      "bold": true
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "class Bird extends Animal {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  fly() {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    console.log(`${this.name} can fly!`); "
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const bird = new Bird('Tuture');"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "bird.fly() // 打印 `Tuture can fly!`"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面我们在类 "
                    },
                    {
                      "text": "Animal",
                      "code": true
                    },
                    {
                      "text": " 的子类 "
                    },
                    {
                      "text": "Bird",
                      "code": true
                    },
                    {
                      "text": " 内部的 "
                    },
                    {
                      "text": "fly",
                      "code": true
                    },
                    {
                      "text": " 方法访问到了 "
                    },
                    {
                      "text": "name",
                      "code": true
                    },
                    {
                      "text": " 属性。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在子类外部访问：",
                      "bold": true
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "class Bird extends Animal {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  fly() {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    console.log(`${this.name} can fly!`);"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const bird = new Bird('Tuture');"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "console.log(bird.name) // 打印 Tuture"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面我们在子类 "
                    },
                    {
                      "text": "Bird",
                      "code": true
                    },
                    {
                      "text": " 的实例 "
                    },
                    {
                      "text": "bird",
                      "code": true
                    },
                    {
                      "text": " 上面访问到了 "
                    },
                    {
                      "text": "name",
                      "code": true
                    },
                    {
                      "text": " 属性。"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "Protected"
                    }
                  ],
                  "id": "iNoqgEs5X"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接下来我们来看一下第二个访问限定符 "
                    },
                    {
                      "text": "protected",
                      "code": true
                    },
                    {
                      "text": " ，它的字面意思是 “受保护的”，比 "
                    },
                    {
                      "text": "public",
                      "code": true
                    },
                    {
                      "text": " 的可访问的范围要小一些，它只能在类和子类中访问，不能被类的实例对象访问也不能被子类的实例对象访问，也就是上面 "
                    },
                    {
                      "text": "public",
                      "code": true
                    },
                    {
                      "text": " 的三种访问里面，被 "
                    },
                    {
                      "text": "protected",
                      "code": true
                    },
                    {
                      "text": " 访问限定符修饰的只能在第一类和第三类里面被访问到："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在类中访问：",
                      "bold": true
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "class Animal {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  protected name: string;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  public constructor(name: string) { // 函数体 }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  move(distance: number) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    console.log(`${this.name} moved ${distance}m.`);"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const bird = new Animal('Tuture');"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "bird.move(520); // 打印 `Tuture moved 520m.`"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们在类内部的 "
                    },
                    {
                      "text": "move",
                      "code": true
                    },
                    {
                      "text": " 方法内访问了 public 类型的 "
                    },
                    {
                      "text": "name",
                      "code": true
                    },
                    {
                      "text": " 属性。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在子类中访问：",
                      "bold": true
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "class Animal {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  protected name: string;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  constructor(name: string) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    this.name = name"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "class Bird extends Animal {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  fly() {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    console.log(`${this.name} can fly!`);"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const bird = new Bird('Tuture');"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "bird.fly() // 打印 `Tuture can fly!`"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面我们在类 "
                    },
                    {
                      "text": "Animal",
                      "code": true
                    },
                    {
                      "text": " 的子类 "
                    },
                    {
                      "text": "Bird",
                      "code": true
                    },
                    {
                      "text": " 内部的 "
                    },
                    {
                      "text": "fly",
                      "code": true
                    },
                    {
                      "text": " 方法访问到了 "
                    },
                    {
                      "text": "name",
                      "code": true
                    },
                    {
                      "text": " 属性。"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "Private"
                    }
                  ],
                  "id": "jvDUXByMX"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "第三类访问限定符是 "
                    },
                    {
                      "text": "private",
                      "code": true
                    },
                    {
                      "text": " ，它的字面意思是 “私有的”，也就是说它的可以访问访问是最小的，只能在类的内部访问到，其他地方都无法访问："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在类中访问：",
                      "bold": true
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "class Animal {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  private name: string;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  public constructor(name: string) { // 函数体 }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  move(distance: number) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    console.log(`${this.name} moved ${distance}m.`);"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const bird = new Animal('Tuture');"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "bird.move(520); // 打印 `Tuture moved 520m.`"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们在类内部的 "
                    },
                    {
                      "text": "move",
                      "code": true
                    },
                    {
                      "text": " 方法内访问了 public 类型的 "
                    },
                    {
                      "text": "name",
                      "code": true
                    },
                    {
                      "text": " 属性。"
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "只读修饰符"
                    }
                  ],
                  "id": "7odyMDEbX"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "就像我们之前学习的接口（"
                    },
                    {
                      "text": "Interface",
                      "code": true
                    },
                    {
                      "text": " ）时可以用 "
                    },
                    {
                      "text": "readonly",
                      "code": true
                    },
                    {
                      "text": " 修饰接口的属性一样，我们也可以用 "
                    },
                    {
                      "text": "readonly",
                      "code": true
                    },
                    {
                      "text": " 修饰类的属性，比如我们动物的简介一旦确定就不会变了，我们可以这样来写："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "class Animal {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  readonly brief: string = '动物是多细胞真核生命体中的一大类群，但是不同于微生物。';"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  // ...其他一样"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "除了属性，我们还可以用 "
                    },
                    {
                      "text": "readonly",
                      "code": true
                    },
                    {
                      "text": " 来修饰类中方法的参数，比如我们在设置此动物的类型时，一般可以给一个默认的类型："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "class Animal {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  type: string;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  "
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  setType(type: string, readonly defaultType = '哺乳动物') {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    this.type = type || defaultType;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "抽象类"
                    }
                  ],
                  "id": "dwP5f46tA"
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "抽象类与抽象方法"
                    }
                  ],
                  "id": "vn7nPnC1U"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "TS 另外一个特性就是抽象类，什么是抽象类了？我们来看个例子："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "abstract class Animal {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  abstract makeSound(): void;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  move(): void {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    console.log(\"Roaming the earth...\");"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到抽象类就是在类之前加上 "
                    },
                    {
                      "text": "abstract",
                      "code": true
                    },
                    {
                      "text": " 关键字，同时，它还不允许被实例化，也就是说如下的操作是不允许的："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const bird = new Animal() // Error"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "除此之外，抽象类相比普通类还有一个额外的特性就是，可以在抽象类中定义抽象方法，就像我们上面的 "
                    },
                    {
                      "text": "makeSound",
                      "code": true
                    },
                    {
                      "text": " 方法，在普通的方法定义之前加上 "
                    },
                    {
                      "text": "abstract",
                      "code": true
                    },
                    {
                      "text": " 关键字，这个抽象方法类似于接口里面的方法的类型定义：1）注解参数和返回值 2）不给出具体的实现，如上面的 "
                    },
                    {
                      "text": "move",
                      "code": true
                    },
                    {
                      "text": " 就是存在具体的实现，而 "
                    },
                    {
                      "text": "makeSound",
                      "code": true
                    },
                    {
                      "text": " 不给出具体的实现。"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "抽象类的继承"
                    }
                  ],
                  "id": "YYS6Cs5vj"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "抽象类只可以被继承，不可以被实例化，且抽象类的继承与普通类也存在不同，普通类的继承可以只是简单的继承，并不需要额外的操作："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "class Animal {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  // Animal 相关的属性"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "class Bird extends Animal {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  // 不需要做任何操作"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "但是如果一个类继承另外一个抽象类，那么它必须得实现抽象类中的抽象方法："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "abstract class Animal {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  abstract makeSound(): void;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  move(): void {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    console.log(\"Roaming the earth...\");"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "class Bird extends Animal {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  makeSound(): void {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    console.log('Tuture tuture tuture.');"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面我们定义了一个 "
                    },
                    {
                      "text": "Bird",
                      "code": true
                    },
                    {
                      "text": " 类，它继承自 "
                    },
                    {
                      "text": "Animal",
                      "code": true
                    },
                    {
                      "text": " 抽象类，它必须得实现 "
                    },
                    {
                      "text": "makeSound",
                      "code": true
                    },
                    {
                      "text": " 抽象方法。"
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "构造函数"
                    }
                  ],
                  "id": "hzoK7VWMV"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "通过上面的讲解我们基本了解了 TS 中的类相比 JS 额外增加的特性，主要是讲解了如何注解类的相关部分内容，接下来我们着重来谈一谈如何用类来注解其他内容。这里为什么类可以作为类型来注解其他内容了？原来在 TS 中声明一个类的同时会创建多个声明："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "1）第一个声明是一个类型，这个类型是这个类实例对象类型，用于注解类的实例对象。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "2）第二个声明则是类的构造函数，我们在实例化类时，就是通过 "
                    },
                    {
                      "text": "new",
                      "code": true
                    },
                    {
                      "text": " 关键字加上这个构造函数调用来生成一个类的实例。"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "声明注解类实例的类型"
                    }
                  ],
                  "id": "HOunMrSug"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可能上面的概念听得有点懵，我们拿之前那个例子来实际演示一下。"
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "class Animal {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  name: string;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  static isAnimal(a: Animal): boolean {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    return a instanceof Animal;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  constructor(name: string) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    this.name = name;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  move(distance: number) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    console.log(`Animal moved ${distance}m.`);"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const bird: Animal = new Animal('Tuture');"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这第一个声明的用于注解类实例对象的类型就是我们上面的 "
                    },
                    {
                      "text": "Animal",
                      "code": true
                    },
                    {
                      "text": " ，当我们声明了一个 "
                    },
                    {
                      "text": "Animal",
                      "code": true
                    },
                    {
                      "text": " 类之后，我们可以用这个 "
                    },
                    {
                      "text": "Animal",
                      "code": true
                    },
                    {
                      "text": " 来注解 "
                    },
                    {
                      "text": "Animal",
                      "code": true
                    },
                    {
                      "text": " 的实例如 "
                    },
                    {
                      "text": "bird",
                      "code": true
                    },
                    {
                      "text": " 或者 "
                    },
                    {
                      "text": "isAnimal",
                      "code": true
                    },
                    {
                      "text": " 方法中的 "
                    },
                    {
                      "text": "a",
                      "code": true
                    },
                    {
                      "text": " 参数，当你理解了这个概念之后，你会发现 "
                    },
                    {
                      "text": "isAnimal",
                      "code": true
                    },
                    {
                      "text": " 方法只允许传入为 "
                    },
                    {
                      "text": "Animal",
                      "code": true
                    },
                    {
                      "text": " 实例的参数 "
                    },
                    {
                      "text": "a",
                      "code": true
                    },
                    {
                      "text": " ，然后返回一个 "
                    },
                    {
                      "text": "a instance Animal",
                      "code": true
                    },
                    {
                      "text": " 的布尔值，这是一个永远返回 "
                    },
                    {
                      "text": "true",
                      "code": true
                    },
                    {
                      "text": " 的函数。"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "这里这个声明的 "
                        },
                        {
                          "text": "Animal",
                          "code": true
                        },
                        {
                          "text": " 类型不包括构造函数 "
                        },
                        {
                          "text": "constructor",
                          "code": true
                        },
                        {
                          "text": " 以及类中的静态方法和静态属性，就像实例对象中是不包含类的构造函数、静态方法和静态属性一样。"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "声明构造函数"
                    }
                  ],
                  "id": "2J51QE3ZZ"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "了解了第一个声明，那么第二个声明又是什么意思了？其实就是上面我们执行 "
                    },
                    {
                      "text": "new Animal('Tuture')",
                      "code": true
                    },
                    {
                      "text": " 来生成一个实例时，这里的 "
                    },
                    {
                      "text": "Animal",
                      "code": true
                    },
                    {
                      "text": " 实际上就是一个构造函数，通过 "
                    },
                    {
                      "text": "new Animal('Tuture')",
                      "code": true
                    },
                    {
                      "text": " 调用实际上就是调用我们类里面的 "
                    },
                    {
                      "text": "constructor",
                      "code": true
                    },
                    {
                      "text": " 函数。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "那么有的同学看到这里就有疑问了，我们的 "
                    },
                    {
                      "text": "Animal",
                      "code": true
                    },
                    {
                      "text": " 类型是用来注解类的实例的，那么类的构造函数 "
                    },
                    {
                      "text": "Animal",
                      "code": true
                    },
                    {
                      "text": " 该如何注解了？我们来看这样一个例子："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "let AnimalCreator = Animal;"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在这段代码中，我们将 "
                    },
                    {
                      "text": "Animal",
                      "code": true
                    },
                    {
                      "text": "  构造函数赋值给 "
                    },
                    {
                      "text": "AnimalCreator",
                      "code": true
                    },
                    {
                      "text": " ，那么我们如何注解这个 "
                    },
                    {
                      "text": "AnimalCreator",
                      "code": true
                    },
                    {
                      "text": " 变量的类型了？当然 TS 具有自动类型推导机制，一般情况下我们是不需要注解这个变量的，但这里如果我们要注解它，那么该如何注解了？答案是可以借助 JS 原有的 "
                    },
                    {
                      "text": "typeof",
                      "code": true
                    },
                    {
                      "text": " 方法："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "let AnimalCreator: typeof Animal = Animal;"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们通过 "
                    },
                    {
                      "text": "typeof Animal",
                      "code": true
                    },
                    {
                      "text": " 获取构造函数 "
                    },
                    {
                      "text": "Animal",
                      "code": true
                    },
                    {
                      "text": " 的类型，然后用此类型注解 "
                    },
                    {
                      "text": "AnimalCreator",
                      "code": true
                    },
                    {
                      "text": " 。"
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "类与接口"
                    }
                  ],
                  "id": "Igi80zH31"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "上面我们了解了类在声明的时候会声明一个类型，此类型可以用于注解类的实例，其实这个类型和我们之前学习的接口（"
                    },
                    {
                      "text": "Interface",
                      "code": true
                    },
                    {
                      "text": " ）有异曲同工之妙，具体类与接口结合使用的时候有如下场景："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "类实现接口"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接口继承类"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "类作为接口使用"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "类实现接口"
                    }
                  ],
                  "id": "LqUloXue7"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "类一般只能继承类，但是多个不同的类如果共有一些属性或者方法时，就可以用接口来定义这些属性或者方法，然后多个类来继承这个接口，以达到属性和方法复用的目的，比如我们有两个类 "
                    },
                    {
                      "text": "Door",
                      "code": true
                    },
                    {
                      "text": " （门）和 "
                    },
                    {
                      "text": "Car",
                      "code": true
                    },
                    {
                      "text": " （车），他们都有 "
                    },
                    {
                      "text": "Alarm",
                      "code": true
                    },
                    {
                      "text": " （报警器）的功能，但是他们又是不同的类，这个时候我们就可以定义一个 "
                    },
                    {
                      "text": "Alarm",
                      "code": true
                    },
                    {
                      "text": " 接口："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "interface Alarm {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  alert(): void;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "class Car implements Alarm {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  alert() {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    console.log('Car alarm');"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "class Door implements Alarm {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  alert() {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    console.log('Door alarm');"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "此时的接口 "
                    },
                    {
                      "text": "Alarm",
                      "code": true
                    },
                    {
                      "text": " 和我们之前定义的抽象类类似，接口中的方法 "
                    },
                    {
                      "text": "alert",
                      "code": true
                    },
                    {
                      "text": " 类似抽象类中的抽象方法，一旦类实现 ("
                    },
                    {
                      "text": "implements",
                      "code": true
                    },
                    {
                      "text": " ）了这个接口，那么也要实现这个接口中的方法，比如这里的 "
                    },
                    {
                      "text": "alert",
                      "code": true
                    },
                    {
                      "text": " 。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "和类的单继承不一样，一个类可以实现多个接口，比如我们的车还可以开灯，那么我们可以定义一个 "
                    },
                    {
                      "text": "Light",
                      "code": true
                    },
                    {
                      "text": " 接口，给车整上灯："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "interface Alarm {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  alert(): void;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "interface Light {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  lightOn(): void;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  lightOff(): void;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "class Car implements Alarm, Light {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  alert() {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    console.log('Car alarm');"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  lightOn() {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    console.log('Car lighton');"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  lightOff() {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    console.log('Car lightoff');"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "接口继承类"
                    }
                  ],
                  "id": "-1Ev18PhY"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接口之所以可以继承类是因为我们之前说到了类在声明的时候会声明一个类型，此类型用于注解类的实例。而接口继承类就是继承这个声明的类型，我们来看一个例子："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "class Point {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  x: number;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  y: number;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "interface Point3d extends Point {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  z: number;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "let point3d: Point3d = { x: 1, y: 2, z: 3 };"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，接口 "
                    },
                    {
                      "text": "Point3d",
                      "code": true
                    },
                    {
                      "text": " 继承自类 "
                    },
                    {
                      "text": "Point",
                      "code": true
                    },
                    {
                      "text": " ，获取了来自类的 "
                    },
                    {
                      "text": "x",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "y",
                      "code": true
                    },
                    {
                      "text": " 属性，实际上接口继承的是声明 "
                    },
                    {
                      "text": "Point",
                      "code": true
                    },
                    {
                      "text": " 类时同时声明的用于注解类实例的那个类型，而这个类型只包含类的实例属性和方法，所以接口继承类也是继承此类的实例属性和方法的类型。"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "类作为接口使用"
                    }
                  ],
                  "id": "MZqMnSlqK"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "类作为接口使用的场景主要在我们给 React 组件的 "
                    },
                    {
                      "text": "Props",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "State",
                      "code": true
                    },
                    {
                      "text": " 进行类型注解的时候，我们既要给组件的 "
                    },
                    {
                      "text": "Props",
                      "code": true
                    },
                    {
                      "text": " 进行类型注解，有时候还要设置组件的 "
                    },
                    {
                      "text": "defaultProps",
                      "code": true
                    },
                    {
                      "text": " 值，这里的 "
                    },
                    {
                      "text": "Props",
                      "code": true
                    },
                    {
                      "text": " 的注解和 "
                    },
                    {
                      "text": "defaultProps",
                      "code": true
                    },
                    {
                      "text": " 值设置原本需要分开进行，我们来看一个例子："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "interface Props {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  value: string;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  onChange: (value: string) => void;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "interface State {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  content: string;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  user: string;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  date: string;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const hardCodeDefaultProps = {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  value: 'tuture',"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  onChange(value: string) { console.log(`Hello ${value}`); }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "class TodoInput extends React.Component<Props, State> {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  static defaultProps: Props = hardCodeDefaultProps;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  render() {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    return <div>Hello World</div>;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面是一个标准的 React 类组件，我们通过 "
                    },
                    {
                      "text": "React.Component<Props, State>",
                      "code": true
                    },
                    {
                      "text": " 的形式注解了这个类组件的 "
                    },
                    {
                      "text": "Props",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "State",
                      "code": true
                    },
                    {
                      "text": " ，通过声明了两个接口来进行注解，这里 "
                    },
                    {
                      "text": "React.Component<Props, State>",
                      "code": true
                    },
                    {
                      "text": " 就是泛型，现在不懂没关系，我们将在下一节讲解泛型，这里可以理解泛型类似 JS 函数，这里的 "
                    },
                    {
                      "text": "<>",
                      "code": true
                    },
                    {
                      "text": " 类似函数的 "
                    },
                    {
                      "text": "()",
                      "code": true
                    },
                    {
                      "text": " ，然后可以接收参数，这里我们传入了两个参数分别注解类的 "
                    },
                    {
                      "text": "Props",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "State",
                      "code": true
                    },
                    {
                      "text": " 。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们还注意到，我们声明了这个类的 "
                    },
                    {
                      "text": "defaultProps",
                      "code": true
                    },
                    {
                      "text": " ，然后定义了一个 "
                    },
                    {
                      "text": "hardCodeDefaultProps",
                      "code": true
                    },
                    {
                      "text": " 来初始化这个 "
                    },
                    {
                      "text": "defaultProps",
                      "code": true
                    },
                    {
                      "text": " 。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这就是常见的 React 类组件的类型注解和默认参数初始化的场景，但是当我们学了类之后，我们可以简化一下上面的类组件的类型注解和默认参数初始化的操作："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "class Props {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  value: string = 'tuture';"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  onChange(value: string) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    console.log('Hello Tuture');"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "interface State {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  content: string;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  user: string;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  date: string;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "class TodoInput extends React.Component<Props, State> {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  static defaultProps: Props = new Props();"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  render() {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    return <div>Hello World</div>;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面我们将接口 "
                    },
                    {
                      "text": "Props",
                      "code": true
                    },
                    {
                      "text": " 换成了类 "
                    },
                    {
                      "text": "Props",
                      "code": true
                    },
                    {
                      "text": " ，这带来了一些改变，就是类里面可以给出属性和方法的具体实现，而我们又知道声明类 "
                    },
                    {
                      "text": "Props",
                      "code": true
                    },
                    {
                      "text": " 的时候会同时声明一个类型 "
                    },
                    {
                      "text": "Props",
                      "code": true
                    },
                    {
                      "text": " ，我们用这个类型来注解组件的 "
                    },
                    {
                      "text": "Props",
                      "code": true
                    },
                    {
                      "text": " ，然后注解 "
                    },
                    {
                      "text": "defaultProps",
                      "code": true
                    },
                    {
                      "text": " ，然后我们用声明类时声明的第二个内容："
                    },
                    {
                      "text": "Props",
                      "code": true
                    },
                    {
                      "text": " 构造函数来创建一个 "
                    },
                    {
                      "text": "Props",
                      "code": true
                    },
                    {
                      "text": " 类型的实例对象并赋值给 "
                    },
                    {
                      "text": "defaultProps",
                      "code": true
                    },
                    {
                      "text": " ，细心的同学可以把这段代码复制到我们之前的 "
                    },
                    {
                      "text": "src/TodoInput.tsx",
                      "code": true
                    },
                    {
                      "text": " 文件里，编辑器应该会显示正常，我们成功利用了类的特性来帮助我们的 React 组件简化代码，提高了代码的逻辑性。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/TodoInput.tsx",
          "display": true,
          "commit": "ff925f8d8e6f44d9051c22ed7c54e9727d015c15",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "动手实践"
                    }
                  ],
                  "id": "r9eT8Br7s"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "学习了类的内容之后，我们马上将学到的知识运用在我们的待办事项小应用里面，打开 "
                    },
                    {
                      "text": "src/TodoInput.tsx",
                      "code": true
                    },
                    {
                      "text": " ，对其中的内容作出对应的修改如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/TodoInput.tsx",
              "commit": "ff925f8d8e6f44d9051c22ed7c54e9727d015c15",
              "hiddenLines": [
                [
                  5,
                  21
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到上面的改动主要有如下几处："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们将之前的函数式组件改成了类组件，然后定义了一个  "
                        },
                        {
                          "text": "TodoInputState",
                          "code": true
                        },
                        {
                          "text": " 接口，加上之前的 "
                        },
                        {
                          "text": "TodoInputProps",
                          "code": true
                        },
                        {
                          "text": " ，一起以泛型的形式注解类的 "
                        },
                        {
                          "text": "Props",
                          "code": true
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "text": "State",
                          "code": true
                        },
                        {
                          "text": " ，接着我们在类中加上实例属性 "
                        },
                        {
                          "text": "state",
                          "code": true
                        },
                        {
                          "text": " 。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们将 "
                        },
                        {
                          "text": "triggerChange",
                          "code": true
                        },
                        {
                          "text": " 、"
                        },
                        {
                          "text": "onContentChange",
                          "code": true
                        },
                        {
                          "text": " 、"
                        },
                        {
                          "text": "onUserChange",
                          "code": true
                        },
                        {
                          "text": " 、"
                        },
                        {
                          "text": "onDateOk",
                          "code": true
                        },
                        {
                          "text": " 四个方法改成了类的私有方法。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们加上了类组件独有的 "
                        },
                        {
                          "text": "render",
                          "code": true
                        },
                        {
                          "text": " 方法，它是一个 "
                        },
                        {
                          "text": "public",
                          "code": true
                        },
                        {
                          "text": " 类型的方法。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "这里我们在改造 "
                        },
                        {
                          "text": "onContentChange",
                          "code": true
                        },
                        {
                          "text": " 的时候，用 "
                        },
                        {
                          "text": "React.ChangeEvent<HTMLInputElement>",
                          "code": true
                        },
                        {
                          "text": " 的方式注解了方法参数的 "
                        },
                        {
                          "text": "e",
                          "code": true
                        },
                        {
                          "text": " ，这里也是泛型的一部分，我们将在下一节着重讲解，这里可以理解为一个 "
                        },
                        {
                          "text": "HTMLInputElement",
                          "code": true
                        },
                        {
                          "text": "类型的的 "
                        },
                        {
                          "text": "React.ChangeEvent",
                          "code": true
                        },
                        {
                          "text": " 。"
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "那么有同学会有疑问了，这里我们是如何知道该这样注解了？实际上，我们看到 "
                        },
                        {
                          "text": "render",
                          "code": true
                        },
                        {
                          "text": " 方法里的 "
                        },
                        {
                          "text": "Input",
                          "code": true
                        },
                        {
                          "text": " 组件的 "
                        },
                        {
                          "text": "onChange",
                          "code": true
                        },
                        {
                          "text": " 方法，当我们把鼠标放上去的时候，编辑器会给出如下提示："
                        }
                      ]
                    },
                    {
                      "type": "image",
                      "children": [
                        {
                          "text": ""
                        }
                      ],
                      "url": "https://imgkr.cn-bj.ufileos.com/100f79cf-7b54-4950-984b-11eb4cc24b06.png"
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "可以看到，编辑器直接提醒我们该怎么注解 "
                        },
                        {
                          "text": "event",
                          "code": true
                        },
                        {
                          "text": " 参数了，果然优秀的编辑器可以提高生产力啊！"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ],
              "id": "l3Xt_aiQH"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在这一节中，我们学习了 TS 的类，主要学习了如下知识："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "parent": "bulleted-list",
                  "children": [
                    {
                      "text": "了解一个类有哪些组成部分，以及如何注解这些组成部分"
                    }
                  ],
                  "level": 0
                },
                {
                  "type": "list-item",
                  "parent": "bulleted-list",
                  "children": [
                    {
                      "text": "了解了 TS 类独有的访问限定符："
                    },
                    {
                      "text": "public",
                      "code": true
                    },
                    {
                      "text": " 、"
                    },
                    {
                      "text": "protected",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "private",
                      "code": true
                    },
                    {
                      "text": " "
                    }
                  ],
                  "level": 0
                },
                {
                  "type": "list-item",
                  "parent": "bulleted-list",
                  "children": [
                    {
                      "text": "了解了 TS 类就像接口一样，它的属性或者方法的参数也可以用 "
                    },
                    {
                      "text": "readonly",
                      "code": true
                    },
                    {
                      "text": " 来修饰"
                    }
                  ],
                  "level": 0
                },
                {
                  "type": "list-item",
                  "parent": "bulleted-list",
                  "children": [
                    {
                      "text": "学习了 TS 的抽象类，知道了抽象类的抽象方法以及抽象类不可以直接被实例化，只可以被子类继承，且继承自抽象类的子类需要实现抽象类的抽象方法，即给出具体的同名方法的方法体"
                    }
                  ],
                  "level": 0
                },
                {
                  "type": "list-item",
                  "parent": "bulleted-list",
                  "children": [
                    {
                      "text": "接着，我们学习了 TS 类的独特性，同时声明了两个内容 1）一个用于注解类实例的类型 2）一个用于生成类实例的构造方法"
                    }
                  ],
                  "level": 0
                },
                {
                  "type": "list-item",
                  "parent": "bulleted-list",
                  "children": [
                    {
                      "text": "最后，我们学习了类和接口的一些互相操作的场景 1）多个类实现同一个接口来复用接口的属性或者方法 2）一个类实现多个接口 3）接口也可以继承类，只不过是继承类声明时同时声明的同名类型 4）类作为接口使用，通过进一步应用类声明的两个内容来简化 React 组件代码，提高代码的逻辑性和可复用性。"
                    }
                  ],
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在这一节最后，我们稍微引申了一下泛型，说它类似 JS 里面的函数，可以接收类型参数，在下一节中，我们将重点讲解泛型的知识和应用，敬请期待！"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "8e1cda79eafa56b74f5823cd5b9ff61367c88616",
      "id": "17faac30",
      "articleId": "05f37363",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "8e1cda79eafa56b74f5823cd5b9ff61367c88616",
          "id": "324ac206",
          "fixed": true,
          "children": [
            {
              "text": "你不知道的泛型"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "为什么要学泛型？因为它可以帮助你 “面向编辑器代码提示编程” ：）"
                }
              ]
            },
            {
              "type": "heading-two",
              "children": [
                {
                  "text": "学习准备"
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "VSCode 编辑器，你可以访问这个网站来下载 "
                    },
                    {
                      "link": true,
                      "url": "https://code.visualstudio.com/",
                      "text": "https://code.visualstudio.com/"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "安装 Node 环境，本系列教程"
                    },
                    {
                      "link": true,
                      "url": "https://tuture.co/2020/04/06/cea18bc/",
                      "text": "第一篇"
                    },
                    {
                      "text": "已经讲解"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "配置 TypeScript 环境"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "创建一个 node 项目："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "mkdir ts-study"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "cd ts-study && npm init -y"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "配置 TypeScript 环境："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "npm install typescript # 安装 TypeScript"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "npx tsc --init # 生成 TypeScript 配置文件"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "修改 "
                },
                {
                  "code": true,
                  "text": "tsconfig.json"
                },
                {
                  "text": " 文件，设置对应的 TS 编译器需要编译的文件如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "json",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "{"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  \"compilerOptions\": {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    \"outDir\": \"./dist\" // 设置编译输出的文件夹"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  },"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  \"include\": ["
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    // 需要编译的ts文件一个*表示文件匹配**表示忽略文件的深度问题"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    \"./src/**/*.ts\""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  ],"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  \"exclude\": [\"node_modules\", \"dist\", \"**/*.test.ts\"] // 排除不需要编译的文件夹"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "配置 TypeScript 编译执行脚本，使用 VSCode 编辑器打开 "
                },
                {
                  "code": true,
                  "text": "ts-study"
                },
                {
                  "text": " 项目，然后修改 "
                },
                {
                  "code": true,
                  "text": "package.json"
                },
                {
                  "text": " 的 "
                },
                {
                  "code": true,
                  "text": "scripts"
                },
                {
                  "text": " 字段如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "json",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "{"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  \"name\": \"ts-study\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  \"version\": \"1.0.0\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  \"description\": \"\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  \"main\": \"index.js\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  \"scripts\": {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    \"build\": \"tsc\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    \"build:w\": \"tsc -w\""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  },"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  \"author\": \"pftom <1043269994@qq.com>\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  \"license\": \"MIT\","
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  \"dependencies\": {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    \"typescript\": \"^3.7.4\""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "接着在项目根目录新建 "
                },
                {
                  "code": true,
                  "text": "src"
                },
                {
                  "text": " 文件夹，并在里面新建  "
                },
                {
                  "code": true,
                  "text": "index.ts"
                },
                {
                  "text": "  文件，接着在项目根目录下的命令行执行 "
                },
                {
                  "code": true,
                  "text": "npm run build:w"
                },
                {
                  "text": " 开始监听 "
                },
                {
                  "code": true,
                  "text": "index.ts"
                },
                {
                  "text": " 文件的修改。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "经过上面的操作，你的 VSCode 编辑器应该是如下样子："
                },
                {
                  "type": "image",
                  "url": "https://cdn.nlark.com/yuque/0/2020/png/123790/1589363620769-f2e6b23a-bb93-4057-8e0a-bb2d7c8c4a68.png#align=left&display=inline&height=851&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1702&originWidth=2254&size=262418&status=done&style=none&width=1127",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "text": "其中 TERMINAL 终端表示正在监听文件修改并编译中，当前文件的编译结果没有错误，因为我们的 "
                },
                {
                  "code": true,
                  "text": "src/index.ts"
                },
                {
                  "text": " 里面还没有写任何内容。一切准备就绪，开始 “面向编辑器代码提示编程”！✌️"
                }
              ]
            },
            {
              "type": "heading-two",
              "children": [
                {
                  "text": "从一个简单的例子说起"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "先不扯那么多泛型的概念，我们先来看一个简单的例子，在 "
                },
                {
                  "code": true,
                  "text": "src/index.ts"
                },
                {
                  "text": " 里面编写如下代码："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "typescript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function getTutureTutorialsInfo(info) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return info;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们编写了一个获取图雀教程信息的函数，接收 "
                },
                {
                  "code": true,
                  "text": "info"
                },
                {
                  "text": " 输入，然后返回 "
                },
                {
                  "code": true,
                  "text": "info"
                },
                {
                  "text": " ，即明确参数类型和返回类型一样。现在这个还只是一个 JavaScript 函数，我们来给它进行类型注解。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "写一个 Low 一点的 TS 函数"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "… 这怎么注解？此时正在阅读的你可能会冒出这个疑问。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "对的，这怎么注解？我们面临着如下几个难题："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "info"
                    },
                    {
                      "text": " 类型未知，它可能是 "
                    },
                    {
                      "code": true,
                      "text": "string"
                    },
                    {
                      "text": " 、 "
                    },
                    {
                      "code": true,
                      "text": "number"
                    },
                    {
                      "text": " 或者其他类型"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "在 "
                    },
                    {
                      "code": true,
                      "text": "info"
                    },
                    {
                      "text": " 类型未知的情况下，我们还要注解返回值类型，并且此返回值类型要和 "
                    },
                    {
                      "code": true,
                      "text": "info"
                    },
                    {
                      "text": " 类型一致，所以我们的返回值类型这里也未知。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "相信有同学会尝试这样去解决："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "typescript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function getTutureTutorialsInfo(info: any): any {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return info;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "很好！你成功写了第一个 \"AnyScript` 函数，这个函数和 JS 函数无异，根本无法用到 TS 的强大类型补全机制，不信你可以在你的 VSCode 编辑器里面尝试加入如下代码："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "typescript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function getTutureTutorialsInfo(info: any): any {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  console.log(info.length);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return info;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到我们添加了一个打印语句 "
                },
                {
                  "code": true,
                  "text": "console.log"
                },
                {
                  "text": " ，如果你没有 Copy 上面的代码，而是选择手敲的话，你会发现输入 "
                },
                {
                  "code": true,
                  "text": "info."
                },
                {
                  "text": " 的时候，编辑器里面没有提示补全 "
                },
                {
                  "code": true,
                  "text": "length"
                },
                {
                  "text": " 属性，因为给 "
                },
                {
                  "code": true,
                  "text": "info"
                },
                {
                  "text": " 注解了 "
                },
                {
                  "code": true,
                  "text": "any"
                },
                {
                  "text": " 类型，TS 编译器无法推断此 "
                },
                {
                  "code": true,
                  "text": "info"
                },
                {
                  "text": " 是什么类型，所以也没有对应的补全，没有补全的 TypeScript 代码是没有生命的😿"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "类型的函数？"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "那么思考一下，这里该如何做类型注解了？相信你已经有答案了，这就是我们这一节要引出的重点：“泛型” ，我将它称之为 “类型的函数”，对应 JS 的函数一样，声明一个 “类型变量”，然后在类型函数代码块里面可以使用这个 “类型变量”。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "一个 JS 函数如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "javascript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function jsFunc(varOne) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  const res = varOne + 1;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return res;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到一个 JS 函数，有一个 "
                },
                {
                  "code": true,
                  "text": "varOne"
                },
                {
                  "text": " 参数，这个参数变量可以在函数体中使用。接下来我们来看一下为什么我把泛型称之为 “类型的函数”，修改我们 "
                },
                {
                  "code": true,
                  "text": "src/index.ts"
                },
                {
                  "text": " 里面的内容："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "typescript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function getTutureTutorialsInfo<T>(info: T): T {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  console.log(info.length);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return info;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到我们给 "
                },
                {
                  "code": true,
                  "text": "getTutureTutorialsInfo"
                },
                {
                  "text": " 后面加上 "
                },
                {
                  "code": true,
                  "text": "<T>"
                },
                {
                  "text": " 这个类似我们上面那个 JS 函数的 "
                },
                {
                  "code": true,
                  "text": "(varOne)"
                },
                {
                  "text": " ，然后我们在原 JS 函数参数和返回值中使用了这个 “类型变量”  "
                },
                {
                  "code": true,
                  "text": "T"
                },
                {
                  "text": " ： "
                },
                {
                  "code": true,
                  "text": "(info: T): T"
                },
                {
                  "text": " ，这样我们就解决了上面的两个难题："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "我们定义了 T 这样一个 “类型变量”，并用它来注解我们的 JS 函数参数 "
                    },
                    {
                      "code": true,
                      "text": "info"
                    },
                    {
                      "text": " 和其返回值，T 既然是一个 “类型变量”，那么接收此 “类型变量” 的 “类型的函数” - 泛型，在之后被调用的时候，我们可以根据需求指定传入的类型，比如 "
                    },
                    {
                      "code": true,
                      "text": "string"
                    },
                    {
                      "text": " 、 "
                    },
                    {
                      "code": true,
                      "text": "number"
                    },
                    {
                      "text": " 等，这就确保了调用函数的用户来决定 "
                    },
                    {
                      "code": true,
                      "text": "info"
                    },
                    {
                      "text": " 的类型 "
                    },
                    {
                      "code": true,
                      "text": "T"
                    },
                    {
                      "text": " ，这样参数的类型就确定了。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "参数和返回值类型都使用了 T 来做类型标注，所以参数值和返回值类型一致。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "但是稍等，上面的代码在编辑器中报错了："
                },
                {
                  "type": "image",
                  "url": "https://cdn.nlark.com/yuque/0/2020/png/123790/1589373760564-73177427-7787-4745-afa5-9597ef8bf081.png#align=left&display=inline&height=178&margin=%5Bobject%20Object%5D&name=image.png&originHeight=356&originWidth=1410&size=58466&status=done&style=none&width=705",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "text": "因为我们将这个函数泛型化了，明确了泛型变量 T 是一个明确类型，所以我们之前的 "
                },
                {
                  "code": true,
                  "text": "info.length"
                },
                {
                  "text": " 会报错，当然这里有同学会问了，我要是这里 T 在之后泛型 （类型的函数）调用的时候传入的是 "
                },
                {
                  "code": true,
                  "text": "string"
                },
                {
                  "text": " 类型，那不是就有 "
                },
                {
                  "code": true,
                  "text": "length"
                },
                {
                  "text": " 属性了嘛，很遗憾，因为 T 还可能是 "
                },
                {
                  "code": true,
                  "text": "number"
                },
                {
                  "text": " 类型，而 "
                },
                {
                  "code": true,
                  "text": "number"
                },
                {
                  "text": " 类型的变量没有 "
                },
                {
                  "code": true,
                  "text": "length"
                },
                {
                  "text": " 属性，所以 TS 编译器报错了。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "为了解决上面的问题，我们可以更近一步，对函数做出修改如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "typescript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function getTutureTutorialsInfo<T>(info: T[]): T[] {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  console.log(info.length);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return info;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这样就好啦，不仅类型确定了，而且参数和返回值类型也一致，并且我们还能明确的使用 "
                },
                {
                  "code": true,
                  "text": "info.length"
                },
                {
                  "text": " 了，因为 TS 编译器知道 "
                },
                {
                  "code": true,
                  "text": "info"
                },
                {
                  "text": " 是一个数组，这个时候你在 VSCode 编辑器里面输入 "
                },
                {
                  "code": true,
                  "text": "info."
                },
                {
                  "text": " ，应该会提示你如下效果："
                },
                {
                  "type": "image",
                  "url": "https://cdn.nlark.com/yuque/0/2020/png/123790/1589374228216-c1add9d1-9f7c-4186-b888-b0fcf99a8e98.png#align=left&display=inline&height=367&margin=%5Bobject%20Object%5D&name=image.png&originHeight=734&originWidth=1484&size=134748&status=done&style=none&width=742",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "text": "有了代码补全的 TS 充满了活力🔥！"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "经过上面的例子，我们发现，其实泛型，就像是一个关于 “类型的函数” 一样，给定输入的类型变量，然后可以使用输入变量经过组合比如 "
                },
                {
                  "code": true,
                  "text": "T[]"
                },
                {
                  "text": " 、进行联合类型或交叉类型操作，来作为注解类型使用。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "类型函数的使用"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "上面我们定义了第一个泛型 - “类型的函数”，接下来我们来尝试使用我们的泛型，在 "
                },
                {
                  "code": true,
                  "text": "src/index.ts"
                },
                {
                  "text": " 中对代码做出对应的修改如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "typescript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function getTutureTutorialsInfo<T>(info: T[]): T[] {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  console.log(info.length);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return info;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "getTutureTutorialsInfo<string>(['hello tuture', 'hello world'])"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到对应 "
                },
                {
                  "code": true,
                  "text": "<T>"
                },
                {
                  "text": " 定义了泛型中的类型变量，我们在调用泛型时，也对应写了 "
                },
                {
                  "code": true,
                  "text": "<string>"
                },
                {
                  "text": " ，这样 "
                },
                {
                  "code": true,
                  "text": "T"
                },
                {
                  "text": " 就在 "
                },
                {
                  "code": true,
                  "text": "getTutureTutorialsInfo"
                },
                {
                  "text": " 函数中就会以 "
                },
                {
                  "code": true,
                  "text": "string"
                },
                {
                  "text": " 的类型被使用，参数 "
                },
                {
                  "code": true,
                  "text": "info"
                },
                {
                  "text": " 和返回值也就对应了 "
                },
                {
                  "code": true,
                  "text": "string[]"
                },
                {
                  "text": " ，你的 VSCode 编辑器里面调用的效果应该如下图，将鼠标移动到 "
                },
                {
                  "code": true,
                  "text": "getTutureTutorialsInfo"
                },
                {
                  "text": " 上，会直接显示 "
                },
                {
                  "code": true,
                  "text": "getTutureTutorialsInfo"
                },
                {
                  "text": " 函数的类型定义，可以看到已经成功将 "
                },
                {
                  "code": true,
                  "text": "T"
                },
                {
                  "text": " 换成了 "
                },
                {
                  "code": true,
                  "text": "string"
                },
                {
                  "text": " 。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://cdn.nlark.com/yuque/0/2020/png/123790/1589375560841-2bf86e59-8442-43f7-b403-d45c02b07847.png#align=left&display=inline&height=188&margin=%5Bobject%20Object%5D&name=image.png&originHeight=376&originWidth=1284&size=70389&status=done&style=none&width=642",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "并且我们还了解到，泛型的使用和 JS 函数的调用一脉相承，更加坚定了我们 泛型 就是 “类型的函数” 的说法和认知。"
                }
              ]
            },
            {
              "type": "block-quote",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "注意："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "上面的泛型中使用的 T 变量，其实只是一个 TypeScript 界比较习惯性的用法，常用的还有 U 等，当然你也可以写成 YourT ，这里不限制。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "上面的泛型调用时，T 接受的类型可以是任意类型，比如对象、函数等类型，不仅仅限于 "
                        },
                        {
                          "code": true,
                          "text": "string"
                        },
                        {
                          "text": " 、 "
                        },
                        {
                          "code": true,
                          "text": "number"
                        },
                        {
                          "text": " 等"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-two",
              "children": [
                {
                  "text": "泛型，再回顾"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们在上面用了很多的笔墨来试图将泛型和 “类型的函数” 划上等号，目的是为了让你理解泛型它工作的一个本来面貌。了解了泛型本来面貌之后，相信诸如使用泛型可以使得 TS 代码组件化，复用代码，你也能了然如胸了。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "泛型是在调用时再限定类型"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们在定义泛型的时候，是一系列类型变量，如 "
                },
                {
                  "code": true,
                  "text": "T"
                },
                {
                  "text": " 、 "
                },
                {
                  "code": true,
                  "text": "U"
                },
                {
                  "text": " 等，这些变量实际的类型我们在定义的时候是不知道的，只有在进行泛型调用的时候，由用户给定实际的类型，所以这里有一种延迟声明类型的作用。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "泛型是否也有多个类型变量？"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "那么，既然泛型可以看做是 “类型的函数”，那么函数能接收多个参数的话，我们的泛型也能接收多个类型变量，比如："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "typescript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function getTutureTutorialsInfo<T, U>(info: T[], profile: U): T[] {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  console.log(info.length);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  console.log(profile);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return info;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "getTutureTutorialsInfo<string, object>(['hello tuture'], { username: 'tuture'})"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，我们修改了 "
                },
                {
                  "code": true,
                  "text": "getTutureTutorialsInfo"
                },
                {
                  "text": " 函数的泛型定义，添加了一个新的类型变量 "
                },
                {
                  "code": true,
                  "text": "U"
                },
                {
                  "text": " ，并用 "
                },
                {
                  "code": true,
                  "text": "U"
                },
                {
                  "text": " 来注解了函数的第二个参数 "
                },
                {
                  "code": true,
                  "text": "profile"
                },
                {
                  "text": " 的类型。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "同样，在调用 "
                },
                {
                  "code": true,
                  "text": "getTutureTutorialsInfo"
                },
                {
                  "text": " 函数的时候，我们也需要传入两个类型变量，这里我们的 "
                },
                {
                  "code": true,
                  "text": "profile"
                },
                {
                  "text": " 被认为是一个 "
                },
                {
                  "code": true,
                  "text": "object"
                },
                {
                  "text": " 类型。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "匿名函数泛型？"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在之前的内容中，我们通过命名函数来讲解了泛型，那么匿名函数如何使用泛型了？其实和命名函数类似，只不过匿名函数是如下形式："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "typescript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const getTutureTutorialsInfo: <T>(info: T[]) => T[] = (info) => {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  console.log(info.length);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return info;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "// 或者"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const getTutureTutorialsInfo: <T>(info: T[]) => T[] = function (info) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  console.log(info.length);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return info;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们直接给匿名函数被赋值的变量进行匿名函数的注解，并加上泛型，你应该回想起之前给一个变量注解函数类型时的样子："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "typescript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "(args1: type1, args2: type2, ..., args3: type3) => returnType"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "而匿名函数泛型只不过在之前加上了 "
                },
                {
                  "code": true,
                  "text": "<T>"
                },
                {
                  "text": " 类型变量，然后可以用于注解参数和返回值。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "泛型默认类型参数？"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "既然我们声称泛型是关于 “类型的函数”，为了更加深刻的论证我们这个观点，我们再进一步。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们都知道函数存在默认参数一说，那么作为 “类型的函数” - 泛型，是否也有默认类型参数这一说了？不好意思，还真的有！我们来看个例子："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "typescript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function getTutureTutorialsInfo<T, U = number>(info: T[], profile: U): T[] {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  console.log(info.length);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  console.log(profile);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return info;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "getTutureTutorialsInfo<string, string>(['hello world'], 'hello tuture')"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到我们给类型变量 "
                },
                {
                  "code": true,
                  "text": "U"
                },
                {
                  "text": " 一个默认的类型参数 "
                },
                {
                  "code": true,
                  "text": "number"
                },
                {
                  "text": " （还记得 ES6 里面有默认值的参数必须靠后放置嘛？）"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "之后我们在进行泛型调用的时候，却给 "
                },
                {
                  "code": true,
                  "text": "U"
                },
                {
                  "text": " 传了 "
                },
                {
                  "code": true,
                  "text": "string"
                },
                {
                  "text": " 类型，把这段代码放到 "
                },
                {
                  "code": true,
                  "text": "src/index.ts"
                },
                {
                  "text": " 里面，应该不会报错，并且编辑器里面有良好的提示："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://cdn.nlark.com/yuque/0/2020/png/123790/1589675218585-092b151b-3854-4f6d-9787-45448a994aff.png#align=left&display=inline&height=113&margin=%5Bobject%20Object%5D&name=image.png&originHeight=226&originWidth=1376&size=37299&status=done&style=none&width=688",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-two",
              "children": [
                {
                  "text": "泛型，继续前进"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "接下来我们继续深入泛型，解答之前文章里的一些疑问，比如："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "泛型数组"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "类泛型"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "同时我们还会了解一些新的概念，比如："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "接口泛型"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "类型别名泛型"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "泛型约束"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "解决遗留的问题"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "泛型数组"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这个我们已经在上面的例子中用到了，泛型实际上定义了一系列类型变量，然后我们可以对这些类型变量做任意的组合以适应各种不同的类型注解需求，其中一个组合例子就是泛型数组 - 某个类型变量的数组形态，也就是我们上面提到的 "
                },
                {
                  "code": true,
                  "text": "info: T[]"
                },
                {
                  "text": " ，其中 "
                },
                {
                  "code": true,
                  "text": "T[]"
                },
                {
                  "text": " 就是泛型数组。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "当然泛型数组的表达形式还有另外一种："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "typescript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "Array<T>"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "即以泛型调用的形式返回一个关于泛型变量 "
                },
                {
                  "code": true,
                  "text": "T"
                },
                {
                  "text": " 的数组类型。所以我们的 "
                },
                {
                  "code": true,
                  "text": "getTutureTutorialsInfo"
                },
                {
                  "text": " 函数可以写成如下样子："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "typescript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function getTutureTutorialsInfo<T>(info: Array<T>): Array<T> {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  console.log(info.length);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return info;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "getTutureTutorialsInfo<string>(['hello tuture', 'hello world'])"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "类泛型"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "类泛型的形式和函数泛型类似，我们来看一个类泛型的定义的调用，在 "
                },
                {
                  "code": true,
                  "text": "src/index.ts"
                },
                {
                  "text": " 里面额外添加下面的内容："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "typescript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "// 上面是 getTutureTutorialsInfo 泛型函数的定义和调用"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "class Tuture<T> {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": " \tinfo: T[];"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "let tutorial = new Tuture<string>()"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "tutorial.info = ['hello world', 'hello tuture'];"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "类泛型的定义也是在类名之后添加 "
                },
                {
                  "code": true,
                  "text": "<T>"
                },
                {
                  "text": " 这样的形式，然后就可以在类中使用 "
                },
                {
                  "code": true,
                  "text": "T"
                },
                {
                  "text": " 类型变量来注解类型。而类泛型的调用和函数泛型的调用类似。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "学习了类泛型，我们再来解析一下在上一篇文章中提到的那个 "
                },
                {
                  "code": true,
                  "text": "TodoInput"
                },
                {
                  "text": " 组件，类似下面这样："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "typescript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "class TodoInput extends React.Component<TodoInputProps, TodoInputState> {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  // ... 组件内容 "
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这个实际上分为两个部分，首先是 "
                },
                {
                  "code": true,
                  "text": "React.Component"
                },
                {
                  "text": " 组件基类的类泛型调用，然后是 "
                },
                {
                  "code": true,
                  "text": "TodoInput"
                },
                {
                  "text": " 集成自这个类泛型。因为派生类 "
                },
                {
                  "code": true,
                  "text": "TodoInput"
                },
                {
                  "text": " 可以获取到父类的属性和方法，所以在 "
                },
                {
                  "code": true,
                  "text": "TodoInput"
                },
                {
                  "text": " 中使用的 "
                },
                {
                  "code": true,
                  "text": "this.props"
                },
                {
                  "text": " 和 "
                },
                {
                  "code": true,
                  "text": "this.state"
                },
                {
                  "text": " 在被类型注解之后，就可以在编码时自动补全，你在写代码的时候应该可以享受到如下好处："
                },
                {
                  "type": "image",
                  "url": "https://cdn.nlark.com/yuque/0/2020/png/123790/1589439212069-c8c90300-5856-49c9-bb36-f42285155332.png#align=left&display=inline&height=175&margin=%5Bobject%20Object%5D&name=image.png&originHeight=350&originWidth=1504&size=64460&status=done&style=none&width=752",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "开启新篇章"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "了解了函数泛型、类泛型，你有可能有一点想法了关于泛型，是不是我们之前的很多讲解过的内容，如类型别名、接口等。你想对了！TS 会在尽可能多的地方，能用泛型就用上泛型，因为泛型可以将代码组件化，方便复用，所有智能的编译器，能不让你多写的东西，就绝对不会让你多写，通通用泛型给整上。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "接口泛型"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在了解接口泛型之前，我们先来看一个接口是怎么写的，在 "
                },
                {
                  "code": true,
                  "text": "src/index.ts"
                },
                {
                  "text": " 里面添加如下代码："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "typescript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "interface Profile {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  username: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  nickName: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  avatar: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  age: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "一般我们的 "
                },
                {
                  "code": true,
                  "text": "Profile"
                },
                {
                  "text": " 类似上面的内容，但是有时候有些字段会根据需求的不同而不同，比如 "
                },
                {
                  "code": true,
                  "text": "age"
                },
                {
                  "text": " 这个字段，有些人喜欢定义成数字类型 "
                },
                {
                  "code": true,
                  "text": "number"
                },
                {
                  "text": " ，有些人喜欢定义成字符串类型 "
                },
                {
                  "code": true,
                  "text": "string"
                },
                {
                  "text": " ，所以这又是一个延迟赋予类型的例子，可以借助泛型来解决，我们修改一下上面的代码："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "typescript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "interface Profile<T> {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  username: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  nickName: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  avatar: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  age: T;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "type ProfileWithAge = Profile<string>"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，接口泛型的声明和调用与函数、类泛型的类似，它允许你在接口里面定义一些属性，使用类型变量来注解，在调用时指明这个属性的类型。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "类型别名泛型"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "因为在很多场景下，类型别名和接口充当类似的角色，所以在了解完接口泛型之后，我们有必要来了解学习一下类型别名如何结合泛型使用，和接口类似，将上面的接口泛型 "
                },
                {
                  "code": true,
                  "text": "Profile"
                },
                {
                  "text": " 用类型别名重写如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "typescript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "type Profile<T> = {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  username: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  nickName: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  avatar: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  age: T;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "type ProfileWithAge = Profile<string>"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，基本一致！"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "泛型约束"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们来解决之前的一个遗留问题，那就是即使我使用了泛型，我还是不知道某个被泛型的类型变量注解的变量的一个结构是怎么样的即："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "typescript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function getTutureTutorialsInfo<T, U>(info: T[], profile: U): T[] {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  console.log(info.length);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  console.log(profile);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return info;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "getTutureTutorialsInfo<string, object>(['hello tuture'], { username: 'tuture'})"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "上面我们用类型变量 "
                },
                {
                  "code": true,
                  "text": "U"
                },
                {
                  "text": " 注解了 "
                },
                {
                  "code": true,
                  "text": "profile"
                },
                {
                  "text": " 参数，但我们在使用 "
                },
                {
                  "code": true,
                  "text": "profile"
                },
                {
                  "text": " 的时候，依然不知道它是什么类型，也就是说泛型虽然解决了类型的可复用性，但是还是不能让我们写代码时获得自动补全的能力😭"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "重申：没有补全的 TypeScript 代码是没有生命的！"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "那么我们如何让在既使用泛型的同时，还能获得代码补全了？答案相信你也猜到了， 那就是我们这一节要讲的泛型约束。我们修改 "
                },
                {
                  "code": true,
                  "text": "src/index.ts"
                },
                {
                  "text": "  里面的代码如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "typescript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "type Profile<T> = {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  username: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  nickName: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  avatar: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  age: T;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function getTutureTutorialsInfo<T, U extends Profile<string>>(info: T[], profile: U): T[] {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  console.log(info.length);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  console.log(profile);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return info;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，我们复用了之前定义的 "
                },
                {
                  "code": true,
                  "text": "getTutureTutorialsInfo"
                },
                {
                  "text": " 和 "
                },
                {
                  "code": true,
                  "text": "Profile"
                },
                {
                  "text": " ，但是在 "
                },
                {
                  "code": true,
                  "text": "getTutureTutorialsInfo"
                },
                {
                  "text": " 泛型中第二个类型变量做了点改进，之前只是单纯的 "
                },
                {
                  "code": true,
                  "text": "U"
                },
                {
                  "text": " ，现在是 "
                },
                {
                  "code": true,
                  "text": "U extends Profile<string>"
                },
                {
                  "text": " ， "
                },
                {
                  "code": true,
                  "text": "Profile<string>"
                },
                {
                  "text": " 表示调用类型别名泛型生成一个 "
                },
                {
                  "code": true,
                  "text": "age"
                },
                {
                  "text": " 为 "
                },
                {
                  "code": true,
                  "text": "string"
                },
                {
                  "text": " 的新类型别名，然后通过 "
                },
                {
                  "code": true,
                  "text": "U extends ..."
                },
                {
                  "text": " 的方式，用 "
                },
                {
                  "code": true,
                  "text": "Profile<string>"
                },
                {
                  "text": " 来限制 "
                },
                {
                  "code": true,
                  "text": "U"
                },
                {
                  "text": " 的类型，也就是 "
                },
                {
                  "code": true,
                  "text": "U"
                },
                {
                  "text": " 必须至少包含 "
                },
                {
                  "code": true,
                  "text": "Profile<string>"
                },
                {
                  "text": " 的类型。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这个时候，我们在 VSCode 编辑器里面尝试输入 "
                },
                {
                  "code": true,
                  "text": "profile."
                },
                {
                  "text": " ，应该可以神奇的发现，有了自动补全："
                },
                {
                  "type": "image",
                  "url": "https://cdn.nlark.com/yuque/0/2020/png/123790/1589444747235-b3442393-4720-4441-a2d2-f7802c33864b.png#align=left&display=inline&height=184&margin=%5Bobject%20Object%5D&name=image.png&originHeight=368&originWidth=1778&size=79012&status=done&style=none&width=889",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "text": "并且还能了解到 "
                },
                {
                  "code": true,
                  "text": "age"
                },
                {
                  "text": " 是 "
                },
                {
                  "code": true,
                  "text": "string"
                },
                {
                  "text": " 属性！"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "再次！有了代码补全的 TS 充满了活力🔥！"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "当然这里的用于约束的 "
                },
                {
                  "code": true,
                  "text": "Profile<string>"
                },
                {
                  "text": " 可以是一个类型别名，也可以是一个接口，也可以是一个类："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "typescript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "class Profile<T>  {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  username: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  nickName: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  avatar: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  age: T;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "// 或者"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "interface Profile<T>  {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  username: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  nickName: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  avatar: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  age: T;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "// 或者"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "type Profile<T> = {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  username: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  nickName: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  avatar: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  age: T;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "更近一步，这里的用于约束类型变量的类型可以是一些更加高级的类型如联合类型、交叉类型等："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "typescript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "type Profile<T> = {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  username: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  nickName: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  avatar: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  age: T;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "type Tuture = {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "\tgithub: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  remote: string[];"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function getTutureTutorialsInfo<T, U extends Profile<string> & Tuture>(info: T[], profile: U): T[] {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  console.log(info.length);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  console.log(profile);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return info;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到我们使用了 "
                },
                {
                  "code": true,
                  "text": "Profile<string>"
                },
                {
                  "text": " 和 "
                },
                {
                  "code": true,
                  "text": "Tuture"
                },
                {
                  "text": " 的交叉类型来约束 "
                },
                {
                  "code": true,
                  "text": "U"
                },
                {
                  "text": " ，在我们的 VSCode 编辑器里面应该会有如下补全效果："
                },
                {
                  "type": "image",
                  "url": "https://cdn.nlark.com/yuque/0/2020/png/123790/1589450760682-5707d859-e331-4641-881a-aeb0d58a30a6.png#align=left&display=inline&height=523&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1046&originWidth=2082&size=166735&status=done&style=none&width=1041",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-two",
              "children": [
                {
                  "text": "深入实践，注解构造函数"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在了解泛型的基础知识，并且结合函数、接口、类型别名和类进行结合使用之后，相信你对如何使用泛型已经有了一点经验了。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "而了解了泛型，你就可以开始尝试深入 TS 类型编程的世界了！接下来我们开始深入一下高阶的 TS 类型编程知识，并尝试讲解一些比较边缘情况如何进行类型注解。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们需要一个 "
                },
                {
                  "code": true,
                  "text": "createInstance"
                },
                {
                  "text": " 函数，它接收一个类构造函数，然后返回此类的实例，并能在调用之后获得良好的代码补全提示（！很重要），并且此函数还需要有足够好的通用性能处理任意构造函数（！泛型） 。我们尝试在 "
                },
                {
                  "code": true,
                  "text": "src/index.ts"
                },
                {
                  "text": "  里面编写一个类以及一个创建此类实例的方法："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "typescript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "class Profile<T> {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  username: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  nickName: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  avatar: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  age: T;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "class TutureProfile extends Profile<string> {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "\tgithub: string; "
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  remote: string[];"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function createInstance(B) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return new B();"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const myTutureProfile = createInstance(TutureProfile);"
                    }
                  ]
                }
              ]
            },
            {
              "type": "block-quote",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "不要问我为什么 "
                    },
                    {
                      "code": true,
                      "text": "createInstance"
                    },
                    {
                      "text": " 的参数是 "
                    },
                    {
                      "code": true,
                      "text": "B"
                    },
                    {
                      "text": " ，因为我们最后很 "
                    },
                    {
                      "code": true,
                      "text": "new B()"
                    },
                    {
                      "text": " 。😁"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "当我们编写了上面这个 "
                },
                {
                  "code": true,
                  "text": "createInstance"
                },
                {
                  "text": " 时，当我们尝试在调用之后输入 "
                },
                {
                  "code": true,
                  "text": "."
                },
                {
                  "text": " ： "
                },
                {
                  "code": true,
                  "text": "createInstance(TutureProfile)."
                },
                {
                  "text": " ，发现编辑器里面没有补全提示实例化对象的相关属性如 "
                },
                {
                  "code": true,
                  "text": "username"
                },
                {
                  "text": " 等"
                },
                {
                  "type": "image",
                  "url": "https://cdn.nlark.com/yuque/0/2020/png/123790/1589447795049-e455c0d7-dfb1-4a6c-9122-dd9142c05b8f.png#align=left&display=inline&height=121&margin=%5Bobject%20Object%5D&name=image.png&originHeight=242&originWidth=1736&size=42443&status=done&style=none&width=868",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "text": "首先我们来解析一下构造函数的样子，因为 TS 类型是鸭子类型，是基于代码的实际样子来进行类型注解的。构造函数是可被实例化的函数，即可以通过 "
                },
                {
                  "code": true,
                  "text": "new XXX()"
                },
                {
                  "text": " 进行调用来创建一个实例，所以构造函数的注解应该类似这样："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "typescript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "interface ConstructorFunction<C> {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": " \t new (): C;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "即形如 "
                },
                {
                  "code": true,
                  "text": "new (): C"
                },
                {
                  "text": " 的函数形式，表示可以通过调用 "
                },
                {
                  "code": true,
                  "text": "new XXX()"
                },
                {
                  "text": " 生成一个 "
                },
                {
                  "code": true,
                  "text": "XXX"
                },
                {
                  "text": " 的实例。即某个类："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "typescript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "class Profile<T> {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  username: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  nickName: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  avatar: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  age: T;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们注解其构造函数类似下面："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "typescript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const profileConstructor: ConstructorFunction<Profile<string>> = Profile;"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这里有同学还记得嘛，我们在上一篇文章中讲到一个类在声明的时候会声明两个东西：1）用于注解此类实例的类型 2）以及此类的构造函数。这个例子是用来表达类在声明时声明的这两样东西的最佳例子之一即："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "ConstructorFunction"
                    },
                    {
                      "text": " 接口泛型接收的 "
                    },
                    {
                      "code": true,
                      "text": "C"
                    },
                    {
                      "text": " 用来注解 "
                    },
                    {
                      "code": true,
                      "text": "new ()"
                    },
                    {
                      "text": " 生成的实例，此为第一：用于注解此类实例的类型。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "用于注解 "
                    },
                    {
                      "code": true,
                      "text": "Profile"
                    },
                    {
                      "text": " 的构造函数的类型 "
                    },
                    {
                      "code": true,
                      "text": "ConstructorFunction<Profile<string>>"
                    },
                    {
                      "text": " ，在注解 "
                    },
                    {
                      "code": true,
                      "text": "profileConstructor"
                    },
                    {
                      "text": " 变量之后，其初始化赋值是 "
                    },
                    {
                      "code": true,
                      "text": "Profile"
                    },
                    {
                      "text": " 本身，并且你可以在你的 VSCode 编辑器里面编写上面的代码，应该不会报错，这说明了第二：声明了此类的构造函数。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "了解了构造函数如何进行类型注解之后，我们来完成第三点要求，让这个 "
                },
                {
                  "code": true,
                  "text": "createInstance"
                },
                {
                  "text": " 更具通用性，二话不说，泛型走起！最终代码如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "typescript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "class Profile<T> {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  username: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  nickName: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  avatar: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  age: T;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "class TutureProfile extends Profile<string> {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "\tgithub: string; "
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  remote: string[];"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "interface ConstructorFunction<C> {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": " \t new (): C;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function createInstance<A extends Profile<string>>(B: ConstructorFunction<A>) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return new B();"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const myTutureProfile = createInstance(TutureProfile);"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "现在你在 VSCode 编辑器 "
                },
                {
                  "code": true,
                  "text": "createInstance(TutureProfile)"
                },
                {
                  "text": " 后面输入 "
                },
                {
                  "code": true,
                  "text": "."
                },
                {
                  "text": " 应该可以看到代码补全："
                },
                {
                  "type": "image",
                  "url": "https://cdn.nlark.com/yuque/0/2020/png/123790/1589449713704-5f8278e5-36af-456d-a42d-26ec435891cd.png#align=left&display=inline&height=670&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1340&originWidth=1872&size=186999&status=done&style=none&width=936",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "text": "这个例子其实关于 "
                },
                {
                  "code": true,
                  "text": "extends"
                },
                {
                  "text": " 类型约束那一块有点多余，但是为了组合我们在这一篇里面学到的知识，所以我额外把它也加上了，可以看到我们重拾了所有的代码补全，代码补全🐂🍺"
                }
              ]
            },
            {
              "type": "block-quote",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "上面类中如 "
                    },
                    {
                      "code": true,
                      "text": "remote"
                    },
                    {
                      "text": " 等属性会有红色下划线是因为报了 "
                    },
                    {
                      "code": true,
                      "text": "Property 'remote' has no initializer and is not definitely assigned in the constructor.ts(2564)"
                    },
                    {
                      "text": " ，字面意思就是没有初始化这些属性，这个不重要，可以通过配置移除，也可以初始化。It’s your choice!"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-two",
              "children": [
                {
                  "text": "参考资料"
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "十万字带你精通 TypeScript："
                    },
                    {
                      "link": true,
                      "url": "https://nodelover.gitbook.io/typescript/fan-xing",
                      "text": "https://nodelover.gitbook.io/typescript/fan-xing"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "什么是 Type predicates: "
                    },
                    {
                      "link": true,
                      "url": "https://fettblog.eu/typescript-type-predicates/",
                      "text": "https://fettblog.eu/typescript-type-predicates/"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "从 JavaScript 到 TypeScript - 泛型："
                    },
                    {
                      "link": true,
                      "url": "https://segmentfault.com/a/1190000010774159",
                      "text": "https://segmentfault.com/a/1190000010774159"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "深入理解 TypeScript："
                    },
                    {
                      "link": true,
                      "url": "https://jkchao.github.io/typescript-book-chinese/typings/generices.html#%E5%8A%A8%E6%9C%BA%E5%92%8C%E7%A4%BA%E4%BE%8B",
                      "text": "https://jkchao.github.io/typescript-book-chinese"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "TypeScript 官方文档："
                    },
                    {
                      "link": true,
                      "url": "https://www.staging-typescript.org/docs/handbook/generics.html",
                      "text": "https://www.staging-typescript.org/docs/handbook/generics.html"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            }
          ]
        },
        {
          "file": "src/index.css",
          "display": false,
          "commit": "8e1cda79eafa56b74f5823cd5b9ff61367c88616",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/index.css",
              "commit": "8e1cda79eafa56b74f5823cd5b9ff61367c88616",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "github": "https://github.com/tuture-dev/typescript-tea",
  "version": "v1",
  "remotes": [
    {
      "name": "gitee",
      "refs": {
        "fetch": "https://gitee.com/tuture/typescript-tea.git",
        "push": "https://gitee.com/tuture/typescript-tea.git"
      }
    },
    {
      "name": "origin",
      "refs": {
        "fetch": "https://github.com/tuture-dev/typescript-tea.git",
        "push": "https://github.com/tuture-dev/typescript-tea.git"
      }
    }
  ]
}